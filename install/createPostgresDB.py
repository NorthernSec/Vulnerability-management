#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Database creation script for PostgreSQL database
#
# Copyright (c) 2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"
import sys
import traceback
try:
  import psycopg2

except:
  sys.exit("Dependencies missing! First run the install script.")

##############################
# DEFAULT VALUES & CONSTANTS #
##############################
# Put all values in lowercase. The program will take care of formatting
# Start closed ticket statusses with "closed-"
# The first one in the list is the default value
def_ticket_statusses=["new", "in progress", "closed-implemented", "closed-irrelevant", "reopened"]
# max_implement_time is in days
def_ticket_priorities=[{"name": "overruled", "max_implement_time": 4,  "min_cvss": None},
                       {"name": "extreme",   "max_implement_time": 7,  "min_cvss": 9.0 },
                       {"name": "high",      "max_implement_time": 14, "min_cvss": 7.0 },
                       {"name": "risky",     "max_implement_time": 21, "min_cvss": 5.0 },
                       {"name": "regular",   "max_implement_time": 28, "min_cvss": 2.5 },
                       {"name": "low",       "max_implement_time": 31, "min_cvss": 0   }]
# Only edit the score, not the name:
def_ticket_urgencies=[{"name": "exploit-kits",      "score":20},
                      {"name": "exploit-framework", "score":10},
                      {"name": "exploit-scripts",   "score":5 },
                      {"name": "no_known_exploits", "score":1 }]
# Use the access type names from def_access_rights (below)
# Statistics are read only
def_roles=[{"name": "reviewer",    "ticket_access": "write-team", "system_group_access": "read-team",  "statistics_access": "read-team", "team_access": "read-team",  "db_access": False},
           {"name": "teamleader",  "ticket_access": "read-team",  "system_group_access": "write-team", "statistics_access": "read-team", "team_access": "write-team", "db_access": False},
           {"name": "management",  "ticket_access": "none",       "system_group_access": "none",       "statistics_access": "read-all",  "team_access": "none",       "db_access": False},
           {"name": "db-engineer", "ticket_access": "write-all",  "system_group_access": "write-all",  "statistics_access": "read-all",  "team_access": "write-all",  "db_access": True}]
###############################
# DO NOT EDIT THESE CONSTANTS #
###############################
def_ticket_resolutions=["upgrade", "merge", "remove", "mittigate", "ignore"]
def_access_rights=["none", "read-team", "write-team", "read-all", "write-all"]
def_teams=[["", "Placeholder for roles that don't have teams"]]

def defaultValues(conn):
  cur = conn.cursor()
  # Ticket_Statusses
  for x in def_ticket_statusses:
    cur.execute("INSERT INTO Ticket_Statusses VALUES(DEFAULT, %s);",(x,))
  # Ticket_Resolutions
  for x in def_ticket_resolutions:
    cur.execute("INSERT INTO Ticket_Resolutions VALUES(DEFAULT, %s);",(x,))
  # Access_Rights
  for x in def_access_rights:
    cur.execute("INSERT INTO Access_Rights VALUES(DEFAULT, %s);",(x,))
  # Ticket_Priorities
  for x in def_ticket_priorities:
    cur.execute("INSERT INTO Ticket_Priorities VALUES(DEFAULT, %s, %s, %s);",(x["name"], x["max_implement_time"], x["min_cvss"]))
  # Ticket_Urgencies
  for x in def_ticket_urgencies:
    cur.execute("INSERT INTO Ticket_Urgencies VALUES(DEFAULT, %s, %s);",(x["name"], x["score"]))
  conn.commit()
  # Roles
  cur.execute("SELECT * FROM Access_Rights;")
  a={v: k for k, v in dict(cur.fetchall()).items()}
  for x in def_roles:
    cur.execute("INSERT INTO Roles VALUES(DEFAULT, %s, %s, %s, %s, %s, %s);",
      (x["name"], a[x["ticket_access"]], a[x["system_group_access"]], a[x["statistics_access"]], a[x["team_access"]], x["db_access"]))

  cur.close()
  conn.commit()
def createTables(conn):
  cur = conn.cursor()
  # Components
  cur.execute("""CREATE TABLE Components(
                   id    serial  PRIMARY KEY,
                   name  text    NOT NULL     UNIQUE);""")

  # System_Group
  cur.execute("""CREATE TABLE System_Groups(
                   id       serial  PRIMARY KEY,
                   name     text    NOT NULL,
                   team_id  int     NOT NULL,
                   info     text,

                   UNIQUE(name, team_id));""")

  # Tickets
  cur.execute("""CREATE TABLE Tickets(
                   id                  serial  PRIMARY KEY,
                   history_created_id  int                  UNIQUE,
                   history_last_id     int                  UNIQUE,
                   cve                 text    NOT NULL,
                   system_group_id     int     NOT NULL,
                   component_id        int     NOT NULL,
                   team_id             int     NOT NULL,

                   UNIQUE(cve, system_group_id, component_id));""")


  # Ticket_History
  cur.execute("""CREATE TABLE Ticket_Histories(
                   id                     serial     PRIMARY KEY,
                   ticket_id              int        NOT NULL,
                   datetime               timestamp  NOT NULL,
                   user_id                int,
                   cvss                   decimal    DEFAULT 0.0,
                   completion_percentage  int        DEFAULT 0,
                   ticket_notes           text,
                   ticket_resolution_id   int,
                   ticket_resolution_fix  text,
                   ticket_status_id       int        NOT NULL,
                   ticket_priority_id     int,
                   ticket_urgency_id      int);""")
  
  # Ticket_Statusses
  cur.execute("""CREATE TABLE Ticket_Statusses(
                   id           serial  PRIMARY KEY,
                   name         text    NOT NULL     UNIQUE,
                   description  text );""")

  # Ticket_Resolutions
  cur.execute("""CREATE TABLE Ticket_Resolutions(
                   id           serial  PRIMARY KEY,
                   name         text    NOT NULL     UNIQUE,
                   description  text );""")

  # Ticket_Priorities
  cur.execute("""CREATE TABLE Ticket_Priorities(
                   id                  serial   PRIMARY KEY,
                   name                text     NOT NULL     UNIQUE,
                   max_implement_time  int      NOT NULL     UNIQUE,
                   min_cvss            decimal               UNIQUE);""")

  # Ticket_Urgencies
  cur.execute("""CREATE TABLE Ticket_Urgencies(
                   id     serial  PRIMARY KEY,
                   name   text    NOT NULL     UNIQUE,
                   score  text    NOT NULL );""")

  # Users
  cur.execute("""CREATE TABLE Users(
                   id          serial  PRIMARY KEY,
                   user_name   text    NOT NULL     UNIQUE,
                   first_name  text    NOT NULL,
                   last_name   text    NOT NULL,
                   password    text    NOT NULL);""")

  # Team_Types
  cur.execute("""CREATE TABLE Roles(
                   id                      serial   PRIMARY KEY,
                   name                    text     NOT NULL     UNIQUE,
                   ticket_access_id        int      NOT NULL,
                   system_group_access_id  int      NOT NULL,
                   statistics_access_id    int      NOT NULL,
                   team_access_id          int      NOT NULL,
                   db_access               boolean  NOT NULL);""")

  # Access_Rights
  cur.execute("""CREATE TABLE Access_Rights(
                   id    serial  PRIMARY KEY,
                   name  text    NOT NULL     UNIQUE);""")

  # Teams
  cur.execute("""CREATE TABLE Teams(
                   id           serial  PRIMARY KEY,
                   name         text    NOT NULL     UNIQUE,
                   description  text    NOT NULL);""")

  # Users_in_Teams
  cur.execute("""CREATE TABLE Users_in_Team(
                   user_id  int,
                   team_id  int,
                   role_id  int,

                   PRIMARY KEY(user_id, team_id, role_id) );""")

  # Components_in_System_Group
  cur.execute("""CREATE TABLE Components_in_System_Group(
                   component_id     int,
                   system_group_id  int,

                   PRIMARY KEY(component_id, system_group_id) );""")

  conn.commit()
  cur.close()

def addForeignKeys(conn):
  cur = conn.cursor()
  cur.execute("""ALTER TABLE System_Groups              ADD FOREIGN KEY(team_id)                 REFERENCES Teams(id)""")

  cur.execute("""ALTER TABLE Tickets                    ADD FOREIGN KEY(component_id)            REFERENCES Components(id)""")
  cur.execute("""ALTER TABLE Tickets                    ADD FOREIGN KEY(system_group_id)         REFERENCES System_Groups(id)""")
  cur.execute("""ALTER TABLE Tickets                    ADD FOREIGN KEY(team_id)                 REFERENCES Teams(id)""")
  cur.execute("""ALTER TABLE Tickets                    ADD FOREIGN KEY(history_created_id)      REFERENCES Ticket_Histories(id)""")
  cur.execute("""ALTER TABLE Tickets                    ADD FOREIGN KEY(history_last_id)         REFERENCES Ticket_Histories(id)""")

  cur.execute("""ALTER TABLE Ticket_Histories           ADD FOREIGN KEY(ticket_id)               REFERENCES Tickets(id)""")
  cur.execute("""ALTER TABLE Ticket_Histories           ADD FOREIGN KEY(ticket_status_id)        REFERENCES Ticket_Statusses(id)""")
  cur.execute("""ALTER TABLE Ticket_Histories           ADD FOREIGN KEY(ticket_resolution_id)    REFERENCES Ticket_Resolutions(id)""")
  cur.execute("""ALTER TABLE Ticket_Histories           ADD FOREIGN KEY(user_id)                 REFERENCES Users(id)""")
  cur.execute("""ALTER TABLE Ticket_Histories           ADD FOREIGN KEY(ticket_priority_id)      REFERENCES Ticket_Priorities(id)""")
  cur.execute("""ALTER TABLE Ticket_Histories           ADD FOREIGN KEY(ticket_urgency_id)       REFERENCES Ticket_Urgencies(id)""")

  cur.execute("""ALTER TABLE Users_in_Team              ADD FOREIGN KEY(user_id)                 REFERENCES Users(id)""")
  cur.execute("""ALTER TABLE Users_in_Team              ADD FOREIGN KEY(team_id)                 REFERENCES Teams(id)""")
  cur.execute("""ALTER TABLE Users_in_Team              ADD FOREIGN KEY(role_id)                 REFERENCES Roles(id)""")

  cur.execute("""ALTER TABLE Roles                      ADD FOREIGN KEY(ticket_access_id)        REFERENCES Access_Rights(id)""")
  cur.execute("""ALTER TABLE Roles                      ADD FOREIGN KEY(system_group_access_id)  REFERENCES Access_Rights(id)""")
  cur.execute("""ALTER TABLE Roles                      ADD FOREIGN KEY(statistics_access_id)    REFERENCES Access_Rights(id)""")
  cur.execute("""ALTER TABLE Roles                      ADD FOREIGN KEY(team_access_id)          REFERENCES Access_Rights(id)""")

  cur.execute("""ALTER TABLE Components_in_System_Group ADD FOREIGN KEY(system_group_id)         REFERENCES System_Groups(id)""")
  cur.execute("""ALTER TABLE Components_in_System_Group ADD FOREIGN KEY(component_id)            REFERENCES Components(id)""")

  conn.commit()
  cur.close()

try:
  conn=psycopg2.connect("dbname=vulnmanager user=vulnmanager password=vulnmanager")
  createTables(conn)
  print("created tables")
  addForeignKeys(conn)
  print("created foreign keys")
  defaultValues(conn)
  print("added default values")
  print("database creation complete")
  
except Exception as e:
  print(traceback.format_exc())
