#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Simple web interface to cve-search to display the last entries
# and view a specific CVE.
#
# Copyright (c) 2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# imports
import os
import sys
_runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(_runPath, ".."))

import random

from tornado.wsgi import WSGIContainer
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop
from flask import Flask, render_template, request, redirect, jsonify, Response
from flask.ext.pymongo import PyMongo
from flask.ext.login import LoginManager, current_user, login_user, logout_user, login_required
from werkzeug import secure_filename

from lib.DatabaseInterface import getGroups, getLastTeamVulns, getComponents, getComponent, getVulnsForSystem, getTicket
from lib.DatabaseInterface import addComponent, addSystemGroup
from lib.DatabaseInterface import alreadyExistsException, teamRequiredException
from lib.VulnManager import SystemGroup, Component
from lib.Config import Configuration as conf
from lib.Toolkit import toStringFormattedCPE

# variables
app = Flask(__name__, static_folder='static', static_url_path='/static')
app.config['SECRET_KEY'] = str(random.getrandbits(256))

# teams
@app.route('/test')
def test():
  return render_template('test.html', data="<script>alert('hi');</script>")

@app.route('/teams/<team>')
def systemView(team=None):
  groups=getGroups(team)
  return render_template('team.html', systemGroups=groups, team=team)

@app.route('/_team_content', methods=['POST'])
def getTeamContent():
  team=request.form.get('team', type=str)
  return render_template("teamContent.html", vulns=getLastTeamVulns(team, 10), team=team)

@app.route('/_get_vulnerabilities', methods=['POST'])
def getVulnerabilities():
  team=request.form.get('team', type=str)
  system=request.form.get('system', type=str)
  cpe=request.form.get('cpe', type=str)
  cpes=cpe if cpe else None
  t="Vulnerabilities for %s in %s"%(getComponent(cpes, system, team)["name"], system) if cpe else "Vulnerabilities in %s"%system
  vulns=getVulnsForSystem(system, team, cpes)
  return render_template("vulnerabilities.html",title=t, vulns=vulns, team=team, system=system)

@app.route('/_get_vulnerability_info', methods=["POST"])
def getVulnInfo():
  team=request.form.get('team', type=str)
  system=request.form.get('system', type=str)
  cve=request.form.get('cve', type=str).replace("vuln:", "")
  return render_template('ticket.html', ticket=getTicket(cve, system, team), statusses=conf.getTicketStatusses())

# Components
@app.route('/components')
def componentsView():
  return render_template('Components.html', components=getComponents())

@app.route('/_add_component')
def _add_Component():
  try:
    name = request.args.get('name', type=str)
    cpe = toStringFormattedCPE(request.args.get('cpe', type=str))
    comments = request.args.get('comments', type=str)
    comments=comments.split(";") if comments else None
    if addComponent(Component(cpe, name, comments)):
      status="already added"
    else:
      status="success"
  except:
    status="fail"
  j={"status":status, "components":getComponents()}
  print(j)
  return jsonify(j)

@app.route('/_get_component')
def _get_component():
  return jsonify(getComponent(request.args.get('cpe', type=str)))

# Systems
@app.route('/_add_system_view', methods=['POST'])
def addSystemView():
  return render_template("addSystem.html", team=request.form.get('team', type=str), components=getComponents())

@app.route('/_add_system')
def addSystem(team=None):
  g=request.args.get('groupName')
  t=request.args.get('team')
  n=request.args.get('notes')
  s=request.args.get('systems').split(";")
  components=[]
  for x in request.args.get('components').split(","):
    components.append(Component(x.split("|")[1],x.split("|")[0],None))
  try:
    if addSystemGroup(SystemGroup(groupID=None, groupName=g, team=t, notes=n, systems=s, components=components)):
      status=["system_added", "success"]; error=""
    else:
      status=["action_failed", "error"];  error="Could not save the system to the database"
  except alreadyExistsException:
    status=  ["action_failed", "error"];  error="A group with this name already exists"
  except teamRequiredException:
    status=  ["action_failed", "error"];  error="There is no team selected to add this system group to."
  return jsonify({"status":status, "error":error, "groups":getGroups(t)})


  
if __name__ == '__main__':
    # get properties
    app.run(host=conf.getFlaskHost(), port=conf.getFlaskPort(), debug=conf.getFlaskDebug())

