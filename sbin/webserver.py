#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Simple web interface to keep track of vulnerable software that you own
#
# Copyright (c) 2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# imports
import os
import sys
_runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(_runPath, ".."))

import itertools
import random
import signal
import time
import urllib 

from tornado.wsgi import WSGIContainer
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop
from flask import Flask, render_template, request, redirect, jsonify, abort
from flask.ext.login import LoginManager, current_user, login_user, logout_user, login_required

import lib.database.CVESearch   as cvedb
import lib.database.VulnManager as vmdb

from lib.exceptions import InvalidVariableTypes, AlreadyExistsException, TeamRequiredException
from lib.objects    import Component, SystemGroup, Ticket, User
from lib.Config     import Configuration as conf
from lib.Toolkit    import addToListOfDicts

# variables
app = Flask(__name__, static_folder='static', static_url_path='/static')
app.config['SECRET_KEY'] = str(random.getrandbits(256))
# login manager
login_manager = LoginManager()
login_manager.init_app(app)

# teams
@app.route('/test')
def test():
  print(cvedb.isVulnerable("cpe:2.3:a:haxx:libcurl"))
  print(cvedb.isVulnerable("cpe:2.3:a:haxx:libcurl:7.29.0"))
  return render_template('test.html', data="<script>alert('hi');</script>")

@app.route('/teams/<team>')
@login_required
def systemView(team=None):
  return render_template('Team.html', team=team, user=getUserInfo(), access=getAccessPerTeam(team))

@app.route('/_get_systems', methods=['POST'])
@login_required
def getSystems():
  team=request.form.get('team', type=str)
  verifyAccess("team", "read", team)
  return render_template("systems.html", team=team, systemGroups=vmdb.getGroupVulns(team, True))

@app.route('/_team_content', methods=['POST'])
@login_required
def getTeamContent():
  team=request.form.get('team', type=str)
  verifyAccess("team", "read", team)
  return render_template("teamContent.html", vulns=vmdb.getLastTeamVulns(team, 10), team=team, user=getCurrentUser())

@app.route('/_get_vulnerabilities', methods=['POST'])
@login_required
def getVulnerabilities():
  i=request.form.get("id", type=str).split("|")
  verifyAccess("system_group", "read", i[0])
  cpe=i[2] if i[2] else None
  t="Vulnerabilities for %s in %s"%(Component(cpe).product, i[1]) if i[2] else "Vulnerabilities in %s"%i[1]
  vulns=vmdb.getVulnsForSystem(i[1], i[0], cpe)
  return render_template("vulnerabilities.html",cpe=cpe, title=t, vulns=vulns, team=i[0], system=i[1])

@app.route('/_closed_tickets', methods=['POST'])
@login_required
def getClosed():
  team=request.form.get('team', type=str)
  system=request.form.get('system', type=str)
  verifyAccess("ticket", "read", team)
  tickets={}
  for t in vmdb.getTickets(team, system, limit="closed"):
    if t.groupName in tickets.keys(): tickets[t.groupName].append(t)
    else: tickets[t.groupName]=[t]
  return render_template("systemTickets.html", tickets=tickets, team=team, system=system)
  
@app.route('/_statistics', methods=['POST'])
@login_required
def get_Statistics():
  team=request.form.get('team', type=str)
  verifyAccess("statistics", "read", team)
  cat=[]; o=[]; c=[]; oac=[];
  for x in vmdb.getStatistics(team):
    cat.append(x["systems"]); o.append(x["new"]); c.append(x["closed"]); oac.append(x["openedAndClosed"]);
  return render_template("statistics.html", stats={"categories": cat, "opened":o, "closed":c, "openedAndClosed":oac})

# Tickets
@app.route('/_get_ticket_info', methods=["POST"])
@login_required
def getTicketInfo():
  i=request.form.get('id', type=str).split("|")
  verifyAccess("ticket", "read", i[0])
  return render_template('ticket.html', ticket=vmdb.getTicket(i[2].strip("vuln:"), i[3], i[1], i[0]), statusses=vmdb.getStatusses())

@app.route('/_set_ticket_notes')
@login_required
def setTicketNotes():
  i=request.args.get('id', type=str).split("|")
  notes=request.args.get('notes', type=str)
  verifyAccess("ticket", "write", i[0], True)
  ticket=vmdb.getTicket(i[2].strip("vuln:"), i[3], i[1], i[0])
  return jsonify({"status":vmdb.setDBTicketStatus(ticket, current_user.id, notes=notes)})

@app.route('/_set_ticket_status')
@login_required
def setTicketStatus():
  i=request.args.get('id', type=str).split("|")
  status=request.args.get('status', type=str)
  verifyAccess("ticket", "write", i[0], True)
  ticket=vmdb.getTicket(i[2].strip("vuln:"), i[3], i[1], i[0])
  curStatus=vmdb.setDBTicketStatus(ticket, current_user.id, status=status)
  updated=None
  if status=="closed-implemented":
    updated=vmdb.updateCPE(ticket)
  #print(updated)
  return jsonify({"status":curStatus, "statusses":vmdb.getStatusses()})

@app.route('/set_ticket_update')
@login_required
def setUpdate():
  i=request.args.get('id', type=str).split("|")
  newCPE=request.args.get('newCPE', type=str)
  updateType=request.args.get('updateType', type=str)
  verifyAccess("ticket", "write", i[0], True)
  ticket=vmdb.getTicket(i[2].strip("vuln:"), i[3], i[1], i[0])
  return jsonify({"status":vmdb.setDBTicketStatus(ticket, current_user.id, updateType=updateType, update=newCPE),
                  "statusses":vmdb.getStatusses()})

# Systems
@app.route('/_add_system_view', methods=['POST'])
@login_required
def addSystemView():
  team=request.form.get('team', type=str)
  verifyAccess("system_group", "write", team)
  return render_template("addSystem.html", team=team, components=vmdb.getComponentNames())

@app.route('/_edit_system', methods=['POST'])
@login_required
def editSystem():
  team=request.form.get('team', type=str)
  group=request.form.get('group', type=str)
  verifyAccess("system_group", "write", team)
  return render_template("addSystem.html", team=team, components=vmdb.getComponentNames(), group=vmdb.getGroups(team, group)[0])

@app.route('/_add_system')
@login_required
def addSystem():
  g=request.args.get('groupName')
  t=request.args.get('team')
  n=request.args.get('notes')
  s=request.args.get('systems').split(";")
  components=[]
  verifyAccess("system_group", "write", t, True)
  if len(request.args.get('components'))!=0:
    for x in request.args.get('components').split(","):
      components.append(Component(x.split("|")[1]))
  try:
    if vmdb.addSystemGroup(SystemGroup(groupID=None, groupName=g, team=t, notes=n, systems=s, components=components)):
      status=["system_added", "success"]; error=""
    else:
      status=["action_failed", "error"];  error="Could not save the system to the database"
  except AlreadyExistsException:
    status=  ["action_failed", "error"];  error="A group with this name already exists"
  except TeamRequiredException:
    status=  ["action_failed", "error"];  error="There is no team selected to add this system group to."
  except InvalidVariableTypes:
    status=  ["action_failed", "error"];  error="Some of the input is invalid"
  return jsonify({"status":status, "error":error, "groups":vmdb.getGroupVulns(t)})


# Users
@app.route('/profile')
@login_required
def userPage():
  return render_template("Profile.html", user=getUserInfo())

# Server
@login_manager.user_loader
def load_user(id):
  return User.get(id)

@app.route('/', methods=['get'])
@app.route('/login', methods=['get'])
def login():
  return render_template('Login.html')

@app.route('/login', methods=['post'])
def login_check():
  # validate username and password
  username = request.form.get('username')
  password = request.form.get('password')
  person = User.get(username)
  try:
    if person and person.verifyPass(password):
      login_user(person)
      return redirect("/profile", code=200)
    else:
      print("fail")
      return render_template('Login.html', status=["wrong_combination", "warning"])
  except Exception as ex:
    print("except: %s"%ex)
    return render_template('Login.html', status=["outdated_database", "error"])

@app.route('/logout')
def logout():
  logout_user()
  return redirect("/login")

# Filters
@app.template_filter('product')
def filterProduct(x):
  y=x.split(":")
  return y[4]if len(y)>4 else None

@app.template_filter('unescape')
def filterUnescape(x):
  return urllib.parse.unquote_plus(x)
  
# Functions
def getAccessPerTeam(team):
  lvl={"none": 0, "team": 1, "all": 2}
  axx={"system_group_write": "none", "system_group_read": "none", "ticket_write": "none", "ticket_read": "none",
       "statistics_write": "none",   "statistics_read": "none",   "team_write": "none",   "team_read": "none", "db": False}
  #for x in [x["access"] for x in list(itertools.chain(*[x["roles"] for x in getCurrentUser().teams if x["name"] == team]))]:
  for x in [{"access": x["access"], "team": x["team"]} for x in list(itertools.chain(*[addToListOfDicts(x["roles"],"team", x["name"]) for x in getCurrentUser().teams]))]:
    for i in ['system_group', 'ticket', 'statistics', 'team']:
      if x["team"] == team or x["access"][i].endswith("all"):
        if x["access"][i].startswith("write-"):
          if lvl[x["access"][i].replace("write-", "")] > lvl[axx[i+"_write"]]: axx[i+"_write"] = x["access"][i].replace("write-", "")
          if lvl[x["access"][i].replace("write-", "")] > lvl[axx[i+"_read"]]:  axx[i+"_read"]  = x["access"][i].replace("write-", "")
        elif x["access"][i].startswith("read-"):
          if lvl[x["access"][i].replace("read-", "")]  > lvl[axx[i+"_read"]]:  axx[i+"_read"]  = x["access"][i].replace("read-", "")
    if x["access"]["db"] == True: axx["db"]==True
  return axx

def verifyAccess(pageType, accessType, team, json=False):
  if pageType is None and accessType is None:
    if team in [x["name"] for x in getCurrentUser().teams]: return
  access=True
  if pageType.lower() == "db" and getAccessPerTeam(team)["db"]: return
  if not pageType.lower() in ["statistics", "system_group", "ticket", "team"] or not accessType.lower() in ["read", "write"]:
    access=False
  if getAccessPerTeam(team)[(pageType+"_"+accessType).lower()] not in ["team", "all"]:
    access=False
  if not access:
    if json:
      abort(403, {'jsonify': True})
    else:
      abort(403, {'jsonify': False})
      
def getCurrentUser():
  # TODO: change to access rights instead of teams
  user = current_user
  return user

def getUserInfo():
  user = current_user
  axx=[]
  for x in vmdb.getTeamNames():
    apt=getAccessPerTeam(x)
    if set(apt.values())-set(["none", False]):
      axx.append({"team": x, "access": getAccessPerTeam(x)})
  for i, x in enumerate(axx):
    if x["team"] == "-":
      axx.pop(i)
  u={"teams": axx, "first_name": user.first_name, "last_name": user.last_name, "id": user.id}
  return u

# Error handling
@app.errorhandler(401)
def loginRequired(error):
  return redirect("/login")

@app.errorhandler(403)
def Forbidden(error):
  if error.description['jsonify']:
    print("jsonify")
    return jsonify({})
  else:
    return render_template('Error.html', status={'except':'teamview-not-allowed'})

# Shutdown process
def sig_handler(sig, frame):
  print('Caught signal: %s' % sig)
  IOLoop.instance().add_callback(shutdown)

def shutdown():
  MAX_WAIT_SECONDS_BEFORE_SHUTDOWN = 3
  print('Stopping http server')
  http_server.stop()

  print('Will shutdown in %s seconds ...' % MAX_WAIT_SECONDS_BEFORE_SHUTDOWN)
  io_loop = IOLoop.instance()
  deadline = time.time() + MAX_WAIT_SECONDS_BEFORE_SHUTDOWN

  def stop_loop():
    now = time.time()
    if now < deadline and (io_loop._callbacks or io_loop._timeouts):
      io_loop.add_timeout(now + 1, stop_loop)
    else:
      io_loop.stop()
      print('Shutdown')
  stop_loop()
    
if __name__ == '__main__':
  flaskHost = conf.getFlaskHost()
  flaskPort = conf.getFlaskPort()
  flaskDebug= conf.getFlaskDebug()

  if flaskDebug:
    #start debug flask server
    app.run(host=flaskHost, port=flaskPort, debug=flaskDebug)
  else:
    # start asynchronous server using tornado wrapper for flask
    # ssl connection
    print("Server starting...")
    if conf.useSSL():
      ssl_options = {"certfile": conf.getSSLCert(), 
                     "keyfile":  conf.getSSLKey() }
    else:
      ssl_options = None
    signal.signal(signal.SIGTERM, sig_handler)
    signal.signal(signal.SIGINT, sig_handler)
    global http_server
    http_server = HTTPServer(WSGIContainer(app), ssl_options=ssl_options)
    http_server.bind(flaskPort, address=flaskHost)
    http_server.start(0)  # Forks multiple sub-processes
    IOLoop.instance().start()
