#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Simple web interface to cve-search to display the last entries
# and view a specific CVE.
#
# Copyright (c) 2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# imports
import os
import sys
_runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(_runPath, ".."))

import random

from tornado.wsgi import WSGIContainer
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop
from flask import Flask, render_template, request, redirect, jsonify, Response
from flask.ext.pymongo import PyMongo
from flask.ext.login import LoginManager, current_user, login_user, logout_user, login_required
from werkzeug import secure_filename

from lib.database.VulnManager import getGroups, getLastTeamVulns, getComponents, getComponent, getVulnsForSystem, getTicket
from lib.database.VulnManager import addComponent, addSystemGroup
from lib.database.VulnManager import setDBTicketNotes, setDBTicketStatus
from lib.database.VulnManager import alreadyExistsException, teamRequiredException
from lib.VulnManager import SystemGroup, Component, Ticket, User
from lib.Config import Configuration as conf
from lib.Toolkit import toStringFormattedCPE

# variables
app = Flask(__name__, static_folder='static', static_url_path='/static')
app.config['SECRET_KEY'] = str(random.getrandbits(256))
# login manager
login_manager = LoginManager()
login_manager.init_app(app)


# teams
@app.route('/test')
def test():
  return render_template('test.html', data="<script>alert('hi');</script>")

@app.route('/teams/<team>')
@login_required
def systemView(team=None):
  return render_template('team.html', systemGroups=getGroups(team), team=team)

@app.route('/_team_content', methods=['POST'])
@login_required
def getTeamContent():
  team=request.form.get('team', type=str)
  return render_template("teamContent.html", vulns=getLastTeamVulns(team, 10), team=team)

@app.route('/_get_vulnerabilities', methods=['POST'])
@login_required
def getVulnerabilities():
  team=request.form.get('team', type=str)
  system=request.form.get('system', type=str)
  cpe=request.form.get('cpe', type=str)
  cpes=cpe if cpe else None
  t="Vulnerabilities for %s in %s"%(getComponent(cpes, system, team)["name"], system) if cpe else "Vulnerabilities in %s"%system
  vulns=getVulnsForSystem(system, team, cpes)
  return render_template("vulnerabilities.html",title=t, vulns=vulns, team=team, system=system)

# Tickets
@app.route('/_get_ticket_info', methods=["POST"])
@login_required
def getTicketInfo():
  team=request.form.get('team', type=str)
  system=request.form.get('system', type=str)
  cve=request.form.get('cve', type=str).replace("vuln:", "")
  return render_template('ticket.html', ticket=getTicket(cve, system, team), statusses=conf.getTicketStatusses(), team=team, system=system)

@app.route('/_set_ticket_notes')
@login_required
def setTicketNotes():
  team=request.args.get('team', type=str)
  system=request.args.get('system', type=str)
  cve=request.args.get('cve', type=str)
  notes=request.args.get('notes', type=str)
  return jsonify({"status":setDBTicketNotes(Ticket(team, system, cve), current_user.id, notes)})

@app.route('/_set_ticket_status')
@login_required
def setTicketStatus():
  team=request.args.get('team', type=str)
  system=request.args.get('system', type=str)
  cve=request.args.get('cve', type=str)
  status=request.args.get('status', type=str)
  return jsonify({"status":setDBTicketStatus(Ticket(team, system, cve), current_user.id, status=status), "statusses":conf.getTicketStatusses()})

# Components
@app.route('/components')
@login_required
def componentsView():
  return render_template('Components.html', components=getComponents())

@app.route('/_add_component')
@login_required
def _add_Component():
  try:
    name = request.args.get('name', type=str)
    cpe = toStringFormattedCPE(request.args.get('cpe', type=str))
    comments = request.args.get('comments', type=str)
    comments=comments.split(";") if comments else None
    if addComponent(Component(cpe, name, comments)):
      status="already added"
    else:
      status="success"
  except:
    status="fail"
  j={"status":status, "components":getComponents()}
  print(j)
  return jsonify(j)

@app.route('/_get_component')
@login_required
def _get_component():
  return jsonify(getComponent(request.args.get('cpe', type=str)))

# Systems
@app.route('/_add_system_view', methods=['POST'])
@login_required
def addSystemView():
  return render_template("addSystem.html", team=request.form.get('team', type=str), components=getComponents())

@app.route('/_add_system')
@login_required
def addSystem(team=None):
  g=request.args.get('groupName')
  t=request.args.get('team')
  n=request.args.get('notes')
  s=request.args.get('systems').split(";")
  components=[]
  for x in request.args.get('components').split(","):
    components.append(Component(x.split("|")[1],x.split("|")[0],None))
  try:
    if addSystemGroup(SystemGroup(groupID=None, groupName=g, team=t, notes=n, systems=s, components=components)):
      status=["system_added", "success"]; error=""
    else:
      status=["action_failed", "error"];  error="Could not save the system to the database"
  except alreadyExistsException:
    status=  ["action_failed", "error"];  error="A group with this name already exists"
  except teamRequiredException:
    status=  ["action_failed", "error"];  error="There is no team selected to add this system group to."
  return jsonify({"status":status, "error":error, "groups":getGroups(t)})

# Server
@login_manager.user_loader
def load_user(id):
  return User.get(id)

@app.route('/login', methods=['get'])
def login():
  return render_template('Login.html')

@app.route('/login', methods=['post'])
def login_check():
  # validate username and password
  username = request.form.get('username')
  password = request.form.get('password')
  person = User.get(username)
  try:
    if person and person.password == password:
    #if person and pbkdf2_sha256.verify(password, person.password):
      login_user(person)
      return redirect("/teams/"+person.team, code=200)
    else:
      print("fail")
      return render_template('Login.html', status=["wrong_combination", "warning"])
  except Exception as ex:
    print("except: %s"%ex)
    return render_template('Login.html', status=["outdated_database", "error"])

@app.route('/logout')
def logout():
  logout_user()
  return redirect("/login")

# Error handling
@app.errorhandler(401)
def loginRequired(error):
  return redirect("/login")

if __name__ == '__main__':
    # get properties
    app.run(host=conf.getFlaskHost(), port=conf.getFlaskPort(), debug=conf.getFlaskDebug())

