#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Simple web interface to keep track of vulnerable software that you own
#
# Copyright (c) 2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# imports
import os
import sys
_runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(_runPath, ".."))

import random

from tornado.wsgi import WSGIContainer
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop
from flask import Flask, render_template, request, redirect, jsonify, Response
from flask.ext.pymongo import PyMongo
from flask.ext.login import LoginManager, current_user, login_user, logout_user, login_required
from werkzeug import secure_filename

from lib.database.VulnManager import getGroups, getLastTeamVulns, getComponents, getComponent, getVulnsForSystem, getTicket, getStatistics, getTeams, getTickets
from lib.database.VulnManager import addComponent, addSystemGroup
from lib.database.VulnManager import setDBTicketNotes, setDBTicketStatus, setDBTicketUpdate
from lib.database.VulnManager import alreadyExistsException, teamRequiredException
from lib.database.CVESearch import isVulnerable
from lib.VulnManager import SystemGroup, Component, Ticket, User
from lib.Config import Configuration as conf
from lib.Toolkit import toStringFormattedCPE

# variables
app = Flask(__name__, static_folder='static', static_url_path='/static')
app.config['SECRET_KEY'] = str(random.getrandbits(256))
# login manager
login_manager = LoginManager()
login_manager.init_app(app)


# teams
@app.route('/test')
def test():
  print(isVulnerable("cpe:2.3:a:haxx:libcurl"))
  print(isVulnerable("cpe:2.3:a:haxx:libcurl:7.29.0"))
  return render_template('test.html', data="<script>alert('hi');</script>")

@app.route('/teams/<team>')
@login_required
def systemView(team=None):
  verifyTeam(team)
  return render_template('team.html', systemGroups=getGroups(team, True), team=team, user=getCurrentUser())

@app.route('/_team_content', methods=['POST'])
@login_required
def getTeamContent():
  team=request.form.get('team', type=str)
  verifyTeam(team)
  return render_template("teamContent.html", vulns=getLastTeamVulns(team, 10), team=team)

@app.route('/_get_vulnerabilities', methods=['POST'])
@login_required
def getVulnerabilities():
  i=request.form.get("id", type=str).split("|")
  print(i)
  verifyTeam(i[0])
  cpes=i[2] if i[2] else None
  t="Vulnerabilities for %s in %s"%(getComponent(cpes, i[1], i[0])["name"], i[1]) if i[2] else "Vulnerabilities in %s"%i[1]
  vulns=getVulnsForSystem(i[1], i[0], cpes)
  return render_template("vulnerabilities.html",cpe=cpes, title=t, vulns=vulns, team=i[0], system=i[1])

@app.route('/_closed_tickets', methods=['POST'])
@login_required
def getClosed():
  team=request.form.get('team', type=str)
  system=request.form.get('system', type=str)
  verifyTeam(team)
  return render_template("systemTickets.html", tickets=getTickets(team, system, limit="closed"), team=team, system=system)
  
@app.route('/_statistics', methods=['POST'])
@login_required
def get_Statistics():
  team=request.form.get('team', type=str)
  verifyTeam(team)
  cat=[]; o=[]; c=[]; oac=[];
  for x in getStatistics(team):
    cat.append(x["systems"]); o.append(x["new"]); c.append(x["closed"]); oac.append(x["openedAndClosed"]);
  return render_template("statistics.html", stats={"categories": cat, "opened":o, "closed":c, "openedAndClosed":oac})

# Tickets
@app.route('/_get_ticket_info', methods=["POST"])
@login_required
def getTicketInfo():
  i=request.form.get('id', type=str).split("|")
  verifyTeam(i[0])
  return render_template('ticket.html', ticket=getTicket(i[2].strip("vuln:"), i[3], i[1], i[0]), statusses=conf.getTicketStatusses())

@app.route('/_set_ticket_notes')
@login_required
def setTicketNotes():
  i=request.args.get('id', type=str).split("|")
  notes=request.args.get('notes', type=str)
  verifyTeam(i[0], True)
  return jsonify({"status":setDBTicketNotes(Ticket(i[0], i[1], i[2].strip("vuln:"), i[3]), current_user.id, notes)})

@app.route('/_set_ticket_status')
@login_required
def setTicketStatus():
  i=request.args.get('id', type=str).split("|")
  status=request.args.get('status', type=str)
  verifyTeam(i[0], True)
  return jsonify({"status":setDBTicketStatus(Ticket(i[0], i[1], i[2].strip("vuln:"), i[3]), current_user.id, status), "statusses":conf.getTicketStatusses()})

@app.route('/set_ticket_update')
@login_required
def setUpdate():
  i=request.args.get('id', type=str).split("|")
  newCPE=request.args.get('newCPE', type=str)
  updateType=request.args.get('updateType', type=str)
  verifyTeam(i[0], True)
  return jsonify({"status":setDBTicketUpdate(Ticket(i[0], i[1], i[2].strip("vuln:"), i[3]), current_user.id, updateType, newCPE), "statusses":conf.getTicketStatusses()})

# Components
@app.route('/components')
@login_required
def componentsView():
  return render_template('Components.html', components=getComponents())

@app.route('/_add_component')
@login_required
def _add_Component():
  try:
    name = request.args.get('name', type=str)
    cpe = toStringFormattedCPE(request.args.get('cpe', type=str))
    comments = request.args.get('comments', type=str)
    comments=comments.split(";") if comments else None
    if addComponent(Component(cpe, name, comments)):
      status="already added"
    else:
      status="success"
  except:
    status="fail"
  j={"status":status, "components":getComponents()}
  print(j)
  return jsonify(j)

@app.route('/_get_component')
@login_required
def _get_component():
  return jsonify(getComponent(request.args.get('cpe', type=str)))

# Systems
@app.route('/_add_system_view', methods=['POST'])
@login_required
def addSystemView():
  return render_template("addSystem.html", team=request.form.get('team', type=str), components=getComponents())

@app.route('/_add_system')
@login_required
def addSystem(team=None):
  g=request.args.get('groupName')
  t=request.args.get('team')
  n=request.args.get('notes')
  s=request.args.get('systems').split(";")
  components=[]
  for x in request.args.get('components').split(","):
    components.append(Component(x.split("|")[1],x.split("|")[0],None))
  try:
    if addSystemGroup(SystemGroup(groupID=None, groupName=g, team=t, notes=n, systems=s, components=components)):
      status=["system_added", "success"]; error=""
    else:
      status=["action_failed", "error"];  error="Could not save the system to the database"
  except alreadyExistsException:
    status=  ["action_failed", "error"];  error="A group with this name already exists"
  except teamRequiredException:
    status=  ["action_failed", "error"];  error="There is no team selected to add this system group to."
  return jsonify({"status":status, "error":error, "groups":getGroups(t)})

# Users
@app.route('/profile')
@login_required
def userPage():
  return render_template("Profile.html", user=getCurrentUser())

# Server
@login_manager.user_loader
def load_user(id):
  return User.get(id)

@app.route('/login', methods=['get'])
def login():
  return render_template('Login.html')

@app.route('/login', methods=['post'])
def login_check():
  # validate username and password
  username = request.form.get('username')
  password = request.form.get('password')
  person = User.get(username)
  try:
    if person.verifyPass(password):
      login_user(person)
      return redirect("/profile", code=200)
    else:
      print("fail")
      return render_template('Login.html', status=["wrong_combination", "warning"])
  except Exception as ex:
    print("except: %s"%ex)
    return render_template('Login.html', status=["outdated_database", "error"])

@app.route('/logout')
def logout():
  logout_user()
  return redirect("/login")

# Filters
@app.template_filter('product')
def filterProduct(x):
  y=x.split(":")
  return y[4]if len(y)>4 else None
  
# Functions
def verifyTeam(team, json=False):
  if team.lower() not in [x.lower() for x in getCurrentUser().teams]:
    if json:
      return jsonify({})
    else:
      return render_template('Error.html', status={'except':'teamview-not-allowed'})

def getCurrentUser():
  user = current_user
  if user.type=="reportViewer": user.teams=getTeams()
  return user

# Error handling
@app.errorhandler(401)
def loginRequired(error):
  return redirect("/login")

if __name__ == '__main__':
    # get properties
    app.run(host=conf.getFlaskHost(), port=conf.getFlaskPort(), debug=conf.getFlaskDebug())

