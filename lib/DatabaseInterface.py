#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Interface for the database connection
#
# Copyright (c) 2014-2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# Imports
import itertools
import re

from lib.Config import Configuration as conf
from lib.VulnManager import SystemGroup, Component, Ticket

# Variables
csdb = conf.getCSMongoConnection()
vmdb = conf.getVMMongoConnection()

# ADD
def addSystemGroup(group):
  if type(group) is not SystemGroup:
    return False
  vmdb = conf.getVMMongoConnection()
  collection=vmdb.systems
  j=group.getDict()
  try:
    count=collection.find({"groupName":j["groupName"], "team":j["team"]}).count()
    if count > 0:
      raise(alreadyExistsException)
    if j["team"]==None:
      count=collection.find({"groupName":j["groupName"], "team":{"$ne":None}}).count()
      if count > 0:
        raise(teamRequiredException)
    print(group.getJSON())
    collection.insert(group.getDict())
    return True
  except Exception as e:
    print(e)
    return False

def addComponent(component):
  if type(component) is not Component:
    return False
  collection=vmdb.components
  j=component.getDict()
  if collection.find({ "$or":[{'name':j['name']},{'cpe':j['cpe']}]}).count() > 0:
    return False
  else:
    collection.insert(j)
    return True

def addTicket(ticket):
  if type(ticket) is not Ticket:
    return False
  collection = vmdb.tickets
  t=ticket.getDict()
  if collection.find({"team":t["team"], "groupName":t["groupName"], "cve":t["cve"]}).count() > 0:
    return False
  else:
    collection.insert(t)
    return True
  
# GET
def getGroups(team):
  collection=vmdb.systems
  c = list(collection.find({"team":team}).sort("groupName", 1))
  for x in c: x.pop('_id')
  return sorted(c, key=lambda s: s["groupName"].lower())

def getComponents():
  collection=vmdb.components
  c = list(collection.find().sort("name", 1))
  for x in c: x.pop('_id')
  return sorted(c, key=lambda s: s["name"].lower())

def getComponent(cpe, system=None, team=None):
  if system and team:
    collection=vmdb.systems
    c = [x for x in collection.find_one({"team":team, "groupName":system})["components"] if x["cpe"] == cpe]
    if c: c=c[0]
  else:
    collection=vmdb.components
    c = collection.find_one({"cpe":cpe})
  if '_id' in c: c.pop('_id')
  return c

def getCPEs(team):
  vulns=getGroups(team)
  cpes=[[x["cpe"] for x in vuln["components"]] for vuln in vulns]
  return list(set(itertools.chain(*cpes)))

def getLastTeamVulns(team, limit):
  return getVulns(getCPEs(team), limit)

def getVulnsForSystem(groupName, systemTeam, cpes=None):
  collection=vmdb.systems
  if type(cpes) is not list and cpes:
    cpes=[cpes]
  if not cpes:
    cpes=[x["cpe"] for x in collection.find_one({"team":systemTeam, "groupName":groupName})["components"]]
    
  vulns=[x["id"] for x in getVulns(cpes, 0)]
  # Get tickets for every cve for the vulnerable systems
  tickets=[getTicket(cve, groupName, systemTeam) for cve in [x["id"] for x in getVulns(cpes, 0)]]
  # Take out the completed tickets
  tickets=[x for x in tickets if not x["status"].lower().startswith("completed")]
  return tickets

def getCVEInfo(cve):
  collection=csdb.cves
  info=collection.find_one({"id":cve})
  if info: info.pop("_id")
  return info

def getVulns(cpes, limit):
  collection=csdb.cves
  if not cpes: return []
  regexes = [re.compile(re.escape(x)) for x in cpes]
  return list(collection.find({'vulnerable_configuration': {"$in":regexes}}).sort("Modified", -1).limit(limit))

def getTicket(cve, system, team):
  collection=vmdb.tickets
  t=collection.find_one({"team":team, "groupName":system, "cve":cve})
  if not t:
    tick=Ticket(team, system, cve, conf.getTicketDefaultValue())
    addTicket(tick)
    t=tick.getDict()
  t["cve"]=getCVEInfo(cve)
  return t

class teamRequiredException(Exception):
  pass
class alreadyExistsException(Exception):
  pass
