#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Config reader to read the configuration file
#
# Copyright (c) 2014-2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# Imports
import sys
import os
runPath = os.path.dirname(os.path.realpath(__file__))
try:
  import psycopg2
  import pymongo
except:
  sys.exit("Dependencies missing! First run the install script.")

import configparser

class Configuration():
  ConfigParser = configparser.ConfigParser()
  ConfigParser.read(os.path.join(runPath, "../etc/configuration.ini"))
  default={'csMongoHost': 'localhost', 'csMongoPort': 27017, 'csMongoDB': 'cvedb',
           'vmHost': 'localhost', 'vmPort': 5432, 'VMDB': 'vulnmanager',
           'FlaskHost':'localhost', 'FlaskPort':5001, 'FlaskDebug':True,
           'ssl': False,            'sslCertificate': "./ssl/cve-search.crt",
                                    'sslKey': "./ssl/cve-search.crt",
           'UserDBRounds':8000 , 'UserDBSaltLength':10}

  @classmethod
  def readSetting(cls, section, item, default):
    result = default
    try:
      if type(default) == bool:
        result = cls.ConfigParser.getboolean(section, item)
      elif type(default) == int:
        result = cls.ConfigParser.getint(section, item)
      elif type(default) == list:
        result = cls.ConfigParser.get(section, item).split(",")
      else:
        result = cls.ConfigParser.get(section, item)
    except:
      pass
    return result

  # Mongo - CVE-Search
  @classmethod
  def getCSMongoDB(cls):
    return cls.readSetting("CVE-Search", "DB", cls.default['csMongoDB'])
  @classmethod
  def getCSMongoConnection(cls):
    mongoHost = cls.readSetting("CVE-Search", "Host", cls.default['csMongoHost'])
    mongoPort = cls.readSetting("CVE-Search", "Port", cls.default['csMongoPort'])
    mongoDB = cls.getCSMongoDB()
    try:
      connect = pymongo.MongoClient(mongoHost, mongoPort)
    except:
      sys.exit("Unable to connect to Mongo. Is it running on %s:%s?"%(mongoHost,mongoPort))
    return connect[mongoDB]

  # Mongo - Vulnerability Manager
  @classmethod
  def getVMDB(cls):
    return cls.readSetting("Vulnerability-Manager", "DB", cls.default['VMDB'])
  @classmethod
  def getVMMongoConnection(cls):
    mongoHost = cls.readSetting("Vulnerability-Manager", "Host", cls.default['vmHost'])
    mongoPort = cls.readSetting("Vulnerability-Manager", "Port", cls.default['vmPort'])
    try:
      connect = pymongo.MongoClient(mongoHost, mongoPort)
    except:
      sys.exit("Unable to connect to Mongo. Is it running on %s:%s?"%(mongoHost,mongoPort))
    return connect[cls.getVMDB()]
    
  # PostgreSQL - Vulnerability Manager
  @classmethod
  def getVMpsqlConnection(cls):
    h = cls.readSetting("Vulnerability-Manager", "Host", cls.default['vmHost'])
    p = cls.readSetting("Vulnerability-Manager", "Port", cls.default['vmPort'])
    d = cls.getVMDB()
    try:
      conn = psycopg2.connect("host='%s' port='%s' dbname=%s user=vulnmanager password=vulnmanager"%(h, p, d))
    except Exception as e:
      print(e)
      sys.exit("Unable to connect to PostgreSQL. Is it running on %s:%s?"%(h,p))
    return conn
    
  # Encryption for users
  @classmethod
  def getUserEncryptionRounds(cls):
    return cls.readSetting("User-DB", "EncryptionRounds", cls.default['UserDBRounds'])
  @classmethod
  def getUserSaltLength(cls):
    return cls.readSetting("User-DB", "SaltLength", cls.default['UserDBSaltLength'])

  # Flask
  @classmethod
  def getFlaskHost(cls):
	  return cls.readSetting("Server", "Host", cls.default['FlaskHost'])
  @classmethod
  def getFlaskPort(cls):
	  return cls.readSetting("Server", "Port", cls.default['FlaskPort'])
  @classmethod
  def getFlaskDebug(cls):
	  return cls.readSetting("Server", "Debug", cls.default['FlaskDebug'])

  # SSL
  @classmethod
  def useSSL(cls):
    return cls.readSetting("Webserver", "SSL", cls.default['ssl'])
  @classmethod
  def getSSLCert(cls):
    return os.path.join(runPath, "..", cls.readSetting("Webserver", "Certificate", cls.default['sslCertificate']))    
  @classmethod
  def getSSLKey(cls):
    return os.path.join(runPath, "..", cls.readSetting("Webserver", "Key", cls.default['sslKey']))
