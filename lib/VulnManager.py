#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Vulnerability Manager Classes
#
# Copyright (c) 2014-2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# Imports
import json

class SystemGroup():
  def verifyVars(self, groupID=None, groupName=None, team=None, notes=None, systems=None, components=None):
    if type(groupName) is not str and groupName.strip() is not "":
      raise(invalidVariableTypes)
    if not all(isinstance(x,str) for x in systems) or not all(isinstance(x,Component) for x in components):
      raise(invalidVariableTypes)
    if notes is not None and type(notes) is not str:
      raise(invalidVariableTypes)

  # init
  def __init__(self, groupID=None, groupName=None, team=None, notes=None, systems=None, components=None):
    self.verifyVars(groupID, groupName, team, notes, systems, components)
    self.groupID=groupID;self.groupName=groupName;self.team=team;self.notes=notes;self.components=components
    self.systems=[x for x in systems if x is not ""]

  # get/set
  def getDict(self):
    return {"groupID":self.groupID, "groupName": self.groupName,  "team":    self.team,
            "systems":self.systems, "components":[x.getDict() for x in self.components]}

  def getJSON(self):
    return json.dumps({"groupID":self.groupID, "groupName":self.groupName,   "team":self.team,
                       "systems":self.systems, "components":[x.getDict() for x in self.components]})

  def fromJSON(self, j):
    x=json.loads(j)
    try:
      self.groupID=x["groupID"]; self.groupName=x["groupName"];  self.team=x["team"]
      self.systems=x["systems"]; self.components=x["components"]
    except:
      raise(invalidSystemGroupInfo)

class Component():
  def verifyVars(self, cpe, name, comments=None):
    if type(cpe) is not str or type(name) is not str or (type(comments) is not list and comments is not None):
      raise(invalidVariableTypes)
    if name.strip() is "" or not (cpe.startswith("cpe:/") or cpe.startswith("cpe:2.3:")):
      raise(invalidVariableTypes)

  # init
  def __init__(self, cpe, name, comments=None):
    self.verifyVars(cpe, name, comments)
    self.cpe=cpe.strip(); self.name=name.strip(); self.comments=comments.strip() if comments else None
    
  # get/set
  def getDict(self):
    return {"cpe":self.cpe, "name":self.name, "comments":self.comments}

  def getJSON(self):
    return json.dumps({"cpe":self.cpe, "name":self.name, "comments":self.comments})

class Ticket():
  def verifyVars(self, team, groupName, cve, status, notes):
    if type(notes) is not str and notes is not None:
      raise(invalidVariableTypes)
    if not all(isinstance(x,str) for x in [team, groupName, cve, status]):
      raise(invalidVariableTypes)
    
  # init
  def __init__(self, team, groupName, cve, status, notes=None):
    self.verifyVars(team, groupName, cve, status, notes)
    self.team=team.strip(); self.groupName=groupName.strip(); self.cve=cve.strip(); self.status=status.strip(); self.notes=notes.strip() if notes else None

  def getDict(self):
    return {"team":self.team, "groupName":self.groupName, "cve":self.cve, "status":self.status}

# Exceptions
class invalidSystemGroupInfo(Exception):
  pass
class invalidVariableTypes(Exception):
  pass
