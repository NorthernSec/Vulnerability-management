#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Vulnerability Manager Classes
#
# Copyright (c) 2014-2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# Imports
import os
import sys
_runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(_runPath, ".."))

import json
import time

from flask.ext.login import UserMixin

from lib.Config import Configuration as conf
from lib.database.Users import getUser, checkPass

# Objects
class SystemGroup():
  def verifyVars(self, groupID=None, groupName=None, team=None, notes=None, systems=None, components=None):
    if type(groupName) is not str and groupName.strip() is not "": raise(invalidVariableTypes)
    if not all(isinstance(x,str) for x in systems) or not all(isinstance(x,Component) for x in components): raise(invalidVariableTypes)
    if notes is not None and type(notes) is not str: raise(invalidVariableTypes)

  # init
  def __init__(self, groupID=None, groupName=None, team=None, notes=None, systems=None, components=None):
    self.verifyVars(groupID, groupName, team, notes, systems, components)
    self.groupID=groupID;self.groupName=groupName;self.team=team;self.notes=notes;self.components=components
    self.systems=[x for x in systems if x is not ""]

  # get/set
  def getDict(self):
    return {"groupID":self.groupID, "groupName": self.groupName,  "team":    self.team,
            "systems":self.systems, "components":[x.getDict() for x in self.components]}

  def getJSON(self):
    return json.dumps({"groupID":self.groupID, "groupName":self.groupName,   "team":self.team,
                       "systems":self.systems, "components":[x.getDict() for x in self.components]})

  def fromJSON(self, j):
    x=json.loads(j)
    try:
      self.groupID=x["groupID"]; self.groupName=x["groupName"];  self.team=x["team"]
      self.systems=x["systems"]; self.components=x["components"]
    except:
      raise(invalidSystemGroupInfo)

class Component():
  def verifyVars(self, cpe, name, comments=None):
    if type(cpe) is not str or type(name) is not str or (type(comments) is not list and comments is not None): raise(invalidVariableTypes)
    if name.strip() is "" or not (cpe.startswith("cpe:/") or cpe.startswith("cpe:2.3:")): raise(invalidVariableTypes)

  # init
  def __init__(self, cpe, name, comments=None):
    self.verifyVars(cpe, name, comments)
    self.cpe=cpe.strip(); self.name=name.strip(); self.comments=comments.strip() if comments else None
    
  # get/set
  def getDict(self):
    return {"cpe":self.cpe, "name":self.name, "comments":self.comments}

  def getJSON(self):
    return json.dumps({"cpe":self.cpe, "name":self.name, "comments":self.comments})

class Ticket():
  def verifyVars(self, team, groupName, cve, cpe, status, notes, history, user):
    if (type(status)  is not str  and status  is not None or
        type(notes)   is not str  and notes   is not None or
        type(history) is not list and history is not None or
        type(user)    is not str  and user    is not None): raise(invalidVariableTypes)
    if not all(isinstance(x,str) for x in [team, groupName, cve, cpe]): raise(invalidVariableTypes)
    if history: 
      if not all(isinstance(x,dict) for x in history): raise(invalidVariableTypes)
    
  # init
  def __init__(self, team, groupName, cve, cpe, status=None, notes=None, history=None, user=None):
    self.verifyVars(team, groupName, cve, cpe, status, notes, history, user)
    self.team=team.strip(); self.groupName=groupName.strip(); self.cve=cve.strip(); self.vulnComp={'cpe':cpe.strip()}
    self.status=status.strip() if status else conf.getTicketDefaultValue()
    self.notes=notes.strip() if notes else ""
    self.history=history if history else [{"time": int(time.time()*10000000), "status": self.status, "user":user}]

  def getDict(self):
    return {"team":self.team, "groupName":self.groupName, "cve":self.cve, "vulnComp":self.vulnComp, "status":self.status, "notes":self.notes, "history":self.history}

class reviewer():
  def verifyVars(self, userID, password, teams):
    if not all(isinstance(x,str) for x in teams): raise(invalidVariableTypes)
    if not all(isinstance(x,str) for x in [userID, password]): raise(invalidVariableTypes)
    
  def __init__(self, userID, password, teams):
    self.verifyVars(userID, password, teams)
    self.userID=userID; self.password=password; self.teams=teams; self.userType="reviewer";

  def getDict(self):
    return {"userID":self.userID, "password":self.password, "teams":self.teams, "type":self.userType}

class reportViewer():
  def verifyVars(self, userID, password):
    if not all(isinstance(x,str) for x in [userID, password]): raise(invalidVariableTypes)

  def __init__(self, userID, password):
    self.verifyVars(userID, password)
    self.userID=userID; self.password=password; self.userType="reportViewer";

  def getDict(self):
    return {"userID":self.userID, "password":self.password, "type":self.userType}

class User(UserMixin):
  def __init__(self, id):
    user=getUser(id)
    if not user: raise UserNotFoundError()
    self.id = id
    self.type = user["type"]
    self.teams = [] if self.type == "reportViewer" else user["teams"]

  @classmethod
  def get(self_class, id):
    try:
      return self_class(id)
    except UserNotFoundError:
      return None
      
  def verifyPass(self, pw):
    return True if checkPass(self.id, pw) else False

# Exceptions
class invalidSystemGroupInfo(Exception):
  pass
class invalidVariableTypes(Exception):
  pass
class UserNotFoundError(Exception):
  pass
