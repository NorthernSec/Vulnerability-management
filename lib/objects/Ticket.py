#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Vulnerability Manager  SystemGroup object
#
# Copyright (c) 2014-2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# Imports
import os
import sys
_runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(_runPath, "../.."))

import decimal
from datetime import datetime
from lib.exceptions import InvalidVariableTypes

# Object
class Ticket():
  def verifyVars(self, team, groupName, cve, cpe, status, notes, history, res, res_fix, user, cvss, priority):
    if (type(status)   is not str             and status   is not None or
        type(notes)    is not str             and notes    is not None or
        type(res)      is not str             and res      is not None or
        type(res_fix)  is not str             and res_fix  is not None or
        type(history)  is not list            and history  is not None or
        type(user)     is not str             and user     is not None or
        type(priority) is not str             and priority is not None or
        type(cvss)     is not decimal.Decimal and cvss     is not None): raise(InvalidVariableTypes)
    if not all(isinstance(x,str) for x in [team, groupName, cve, cpe]): raise(InvalidVariableTypes)
    if history:
      if not all(isinstance(x,dict) for x in history): raise(InvalidVariableTypes)
    
  # init
  def __init__(self, team, groupName, cve, cpe, status=None, notes=None, history=None, resolution=None, resolution_fix=None, user=None, cvss=None, priority=None):
    self.verifyVars(team, groupName, cve, cpe, status, notes, history, resolution, resolution_fix, user, cvss, priority)
    self.team=team.strip(); self.groupName=groupName.strip(); self.cve=cve.strip(); self.cvss=cvss;
    self.vulnComp={'cpe':cpe.strip(), 'update':resolution_fix, 'type':resolution}
    self.resolution=resolution.strip() if resolution else None;
    self.resolution_fix=resolution_fix.strip() if resolution_fix else None
    self.status=status.strip() if status else None
    self.notes=notes.strip() if notes else ""
    self.priority=priority.strip() if priority else "None"
    self.history=history if history else [{"time": datetime.now(), "status": self.status, "user":user}]

  def getDict(self):
    return {"team":self.team, "groupName":self.groupName, "cve":self.cve, "vulnComp":self.vulnComp, "status":self.status, 
            "notes":self.notes, "history":self.history, "cvss":self.cvss, "priority": self.priority}
