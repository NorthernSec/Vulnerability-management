#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Vulnerability Manager  SystemGroup object
#
# Copyright (c) 2014-2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# Imports
import os
import sys
_runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(_runPath, "../.."))

from lib.objects import Component
from lib.exceptions import InvalidVariableTypes

# Class
class SystemGroup():
  def verifyVars(self, groupID=None, groupName=None, team=None, notes=None, systems=None, components=None):
    if type(groupName) is not str or groupName.strip() is "": raise(InvalidVariableTypes)
    if not all(isinstance(x,str) for x in systems) or not all(isinstance(x,Component) for x in components): raise(InvalidVariableTypes)
    if notes is not None and type(notes) is not str: raise(InvalidVariableTypes)

  # init
  def __init__(self, groupID=None, groupName=None, team=None, notes=None, systems=None, components=None):
    self.verifyVars(groupID, groupName, team, notes, systems, components)
    self.groupID=groupID;self.groupName=groupName;self.team=team;self.notes=notes;self.components=components
    self.systems=[x for x in systems if x is not ""]

  # get/set
  def getDict(self):
    return {"groupID":self.groupID, "groupName": self.groupName,  "team":    self.team,
            "systems":self.systems, "components":[x.getDict() for x in self.components]}
