@cursor_wrapped
def getTicket(cur, cve, cpe, system, team):
  cur.execute("""SELECT Tickets.id, Teams.name, System_Groups.name, Tickets.cve, Components.name, 
                   Ticket_Statusses.name, Ticket_Histories.ticket_notes, Ticket_Histories.ticket_resolution_id,
                   Ticket_Histories.ticket_resolution_fix, Ticket_Histories.cvss, Ticket_Histories.ticket_priority_id
                 FROM Tickets, System_Groups, Components, Teams, Ticket_Histories, Ticket_Resolutions, Ticket_Statusses
                 WHERE cve=%s
                   AND component_id    IN ( SELECT id FROM Components    WHERE name = %s )
                   AND system_group_id IN ( SELECT id FROM System_Groups WHERE name = %s
                                               AND team_id IN ( SELECT id FROM Teams         WHERE name = %s ))
                   AND System_Groups.id      = Tickets.system_group_id
                   AND Components.id         = Tickets.component_id
                   AND Teams.id              = Tickets.team_id
                   AND Ticket_Histories.id   = Tickets.history_last_id
                   AND Ticket_Statusses.id   = Ticket_Histories.ticket_status_id;""", (cve, cpe, system, team))
  data=cur.fetchone()
  print(data)
  c=list(data) if data else data
  
  if c:
    if c[10]:
      cur.execute("SELECT name FROM Ticket_Priorities where id=%s", (c[10],))
      priority=(cur.fetchone())[0]
    else:
      priority=None
    cur.execute("SELECT name FROM Ticket_Resolutions")
    t_res= [x[0] for x in cur.fetchall()]
    cur.execute("SELECT name FROM Ticket_Priorities")
    t_prior= [x[0] for x in cur.fetchall()]
    cur.execute("SELECT name FROM Ticket_Urgencies")
    t_urgent= [x[0] for x in cur.fetchall()]
    cur.execute("""SELECT datetime, Users.user_name, cvss, ticket_notes, Ticket_Statusses.name, ticket_resolution_id, ticket_resolution_fix,
                     ticket_priority_id, ticket_urgency_id
                   FROM Ticket_Histories, Ticket_Statusses, Users
                   WHERE ticket_id=%s
                     AND Ticket_Statusses.id = Ticket_Histories.ticket_status_id
                     AND Users.id = Ticket_Histories.user_id;""", (c[0],))
    histories=cur.fetchall()
    h=[]
    for x in histories:
      h.append({"time": x[0], "user": x[1], "cvss": x[2], "notes": x[3], "status": x[4], "update": {"type": xFromy(x[5], t_res), "cpe": x[6]},
                "priority": xFromy(x[7], t_prior), "urgency": xFromy(x[8], t_urgent)})
    if c[7]:
      cur.execute("""SELECT name FROM Ticket_Resolutions WHERE id = %s""", (c[7],))
      c[7]=cur.fetchone()[0]
    c=Ticket(c[1], c[2], c[3], c[4], status=c[5], notes=c[6], history=h, resolution=c[7], resolution_fix=c[8], cvss=c[9], priority=priority, objID=c[0])
  else:
    tick=Ticket(team, system, cve, cpe)
    addTicket(tick)
    c=getTicket(tick.cve, tick.vulnComp["cpe"], tick.groupName, tick.team)
  c.addInfo(cvedb.getCVEInfo(cve))
  updatePriority(c)
  return c

@cursor_wrapped
def getTickets(cur, team, system=None, limit=None):
  # Build up statement
  command = """SELECT Tickets.cve, Components.name, System_Groups.name, Teams.name
                 FROM Tickets, System_Groups, Components, Teams, Ticket_histories
                 WHERE System_Groups.id      = Tickets.system_group_id
                   AND Components.id         = Tickets.component_id
                   AND Teams.id              = Tickets.team_id
                   AND Ticket_Histories.id   = Tickets.history_last_id """
  if   limit and limit.lower()=="open":   limit = """AND Ticket_Histories.ticket_status_id IN
                                                       ( SELECT id FROM Ticket_Statusses WHERE name NOT LIKE 'closed-%%' ) """
  elif limit and limit.lower()=="closed": limit = """AND Ticket_Histories.ticket_status_id IN
                                                       ( SELECT id FROM Ticket_Statusses WHERE name LIKE 'closed-%%' ) """
  else:                                   limit = ""
  # Execute statement based on system or all systems
  if system:
    cur.execute(command + limit + """AND Tickets.team_id IN ( SELECT id FROM Teams         WHERE name=%s )
                                     AND system_group_id IN ( SELECT id FROM System_Groups WHERE name=%s )""", (team, system))
  else:
    cur.execute(command + limit + """AND Tickets.team_id IN ( SELECT id FROM Teams         WHERE name=%s )""", (team, ))
  return [getTicket(x[0],x[1],x[2],x[3]) for x in cur.fetchall()]

@cursor_wrapped
def getGroup(cur, team, group):
  cur.execute("""SELECT * FROM System_Groups WHERE team_id IN (SELECT id FROM Teams WHERE name=%s) AND name=%s;""", (team, group))
  c = cur.fetchone()
  if c: return getGroupDetails(c)

@cursor_wrapped
def getGroupDetails(cur, group):
  cur.execute("""SELECT name FROM Teams WHERE id=%s;""", (group[2],))
  tid=cur.fetchone()[0]
  clist=[]
  cur.execute("""SELECT * FROM Components WHERE id IN ( SELECT component_ID FROM Components_in_System_Group WHERE system_group_id = %s );""", (group[0],))
  for comp in cur.fetchall():
    clist.append(Component(comp[1]))
  return SystemGroup(None, group[1], tid, None, [], clist)

