#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Interface for the database connection
#
# Copyright (c) 2014-2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# Imports
import itertools
import re
import time
from datetime import date
from datetime import datetime

from lib.Config import Configuration as conf
from lib.VulnManager import SystemGroup, Component, Ticket
from lib.database.CVESearch import getVulns, getCVEInfo, isVulnerable

# Variables
vmdb = conf.getVMMongoConnection()
# Collections
systems=vmdb.systems
components = vmdb.components
tickets = vmdb.tickets

# ADD
def addSystemGroup(group):
  if type(group) is not SystemGroup: return False
  j=group.getDict()
  try:
    count=systems.find({"groupName":j["groupName"], "team":j["team"]}).count()
    if count > 0: raise(alreadyExistsException)
    if j["team"]==None:
      count=systems.find({"groupName":j["groupName"], "team":{"$ne":None}}).count()
      if count > 0: raise(teamRequiredException)
    systems.insert(group.getDict())
    return True
  except Exception as e:
    print(e)
    return False

def addComponent(component):
  if type(component) is not Component: return False
  j=component.getDict()
  if components.find({ "$or":[{'name':j['name']},{'cpe':j['cpe']}]}).count() > 0:
    return False
  else:
    components.insert(j)
    return True

def addTicket(ticket):
  if type(ticket) is not Ticket: return False
  t=ticket.getDict()
  if tickets.find({"team":t["team"], "groupName":t["groupName"], "cve":t["cve"]}).count() > 0:
    return False
  else:
    tickets.insert(t)
    return True
  
# GET
def getGroups(team, colorVulnerable=False):
  c = list(systems.find({"team":team}).sort("groupName", 1))
  for x in c: x.pop('_id')
  if colorVulnerable:
    for x in c:
      for comp in x["components"]:
        vuln=isVulnerable(comp["cpe"])
        if vuln: x["vulnerable"]=True
        comp["vulnerable"]=vuln
  return sorted(c, key=lambda s: s["groupName"].lower())

def getComponents(team=None, system=None):
  if team and system:
    c=list(systems.find_one({"team":team, "groupName":system})["components"])
  else:
    c=[]
    for system in systems.find():
      c.extend(system["components"])
  c=[x["cpe"] for x in c]
  return sorted(list(set(c)), key=lambda s: s.lower())

def getComponent(cpe, system=None, team=None):
  if system and team:
    c = [x for x in systems.find_one({"team":team, "groupName":system})["components"] if x["cpe"] == cpe]
    if c: c=c[0]
  else:
    c = components.find_one({"cpe":cpe})
  if '_id' in c: c.pop('_id')
  return c

def getCPEs(team):
  vulns=getGroups(team)
  cpes=[[x["cpe"] for x in vuln["components"]] for vuln in vulns]
  return list(set(itertools.chain(*cpes)))

def getLastTeamVulns(team, limit):
  return getVulns(getCPEs(team), limit)

def getVulnsForSystem(groupName, systemTeam, cpes=None):
  if type(cpes) is not list and cpes:cpes=[cpes]
  if not cpes: cpes=[x["cpe"] for x in systems.find_one({"team":systemTeam, "groupName":groupName})["components"]]

  # Get tickets for every cve for the vulnerable systems
  tickets=[]
  for cpe in cpes:
    tickets.extend([getTicket(cve, cpe, groupName, systemTeam) for cve in [x["id"] for x in getVulns([cpe], 0)]])
  tickets=[x for x in tickets if not x["status"].lower().startswith("closed")]
  return tickets

def getTicket(cve, cpe, system, team):
  t=tickets.find_one({"team":team, "groupName":system, "cve":cve, "vulnComp.cpe":cpe})
  if not t:
    tick=Ticket(team, system, cve, cpe)
    addTicket(tick)
    t=tick.getDict()
  t["cve"]=getCVEInfo(cve)
  return t

def getTickets(team, system=None, limit=None):
  search={"team":team}
  if system: search["groupName"]=system
  systems={}
  ticks=tickets.find(search)
  # Limits
  if   limit and limit.lower()=="open":   ticks=[x for x in ticks if not x["status"].lower().startswith("closed")]
  elif limit and limit.lower()=="closed": ticks=[x for x in ticks if x["status"].lower().startswith("closed")]
  # Sort
  for t in ticks:
    x = getTicket(t["cve"], t["groupName"], team)
    if t["groupName"] in systems.keys(): systems[t["groupName"]].append(x)
    else: systems[t["groupName"]]=[x]
  return systems

def getStatistics(team):
  groups=getGroups(team)
  start=date(date.today().year, date.today().month,1)
  end=date(date.today().year, date.today().month+1,1)
  default=conf.getTicketDefaultValue()
  systems=[]
  for x in groups:
    new=0
    closed=0
    oac=0
    tickets=[]
    for cpe in [y["cpe"] for y in x["components"]]:
      tickets.extend([getTicket(cve, cpe, x["groupName"], team) for cve in [x["id"] for x in getVulns([cpe], 0)]])
    for z in tickets:
      opened=False
      for h in z["history"]:
        d=datetime.fromtimestamp(h["time"]/10000000).date()
        if "status" in h and d >= start and d < end:
          if h["status"] == default:
            new+=1
            opened=True
          elif h["status"].lower().startswith("closed"):
            if opened:
              oac+=1
              new-=1
            else:
              closed+=1
    systems.append({"systems":x["groupName"], "new": new, "closed": closed, "openedAndClosed":oac})
  return systems

def getTeams():
  return list(set([x["team"] for x in list(systems.find())]))

# UPDATE
def setDBTicketNotes(ticket, user, notes):
  t=ticket.getDict()
  if "notes" in t and t["notes"] == notes.strip(): return False
  history={"time": int(time.time()*10000000), "user":user, "notes": notes.strip()}
  tickets.update({"team":t["team"], "groupName":t["groupName"], "cve":t["cve"], "vulnComp.cpe":t["vulnComp"]["cpe"]},{"$set":{"notes": notes.strip()}, "$addToSet":{"history":history}})
  return True

def setDBTicketStatus(ticket, user, status):
  t=ticket.getDict()
  if t["status"] == status.strip(): return False
  history={"time": int(time.time()*10000000), "user":user, "status": status.strip()}
  tickets.update({"team":t["team"], "groupName":t["groupName"], "cve":t["cve"], "vulnComp.cpe":t["vulnComp"]["cpe"]},{"$set":{"status": status.strip()}, "$addToSet":{"history":history}})
  return True

def setDBTicketUpdate(ticket, user, uType, update):
  t=ticket.getDict()
  if not update: update=""
  if t["vulnComp"]["cpe"] == update.strip(): return False
  history={"time": int(time.time()*10000000), "user":user, "update": {"type":uType, "cpe":update.strip()}}
  tickets.update({"team":t["team"], "groupName":t["groupName"], "cve":t["cve"], "vulnComp.cpe":t["vulnComp"]["cpe"]},{"$set":{"vulnComp.update": update.strip(), "vulnComp.type":uType.strip()}, "$addToSet":{"history":history}})
  return True

# EXCEPTIONS
class teamRequiredException(Exception):
  pass
class alreadyExistsException(Exception):
  pass
