#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Interface for the database connection
#
# Copyright (c) 2014-2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# Imports
import itertools
import re
import time
import sys
from datetime import date
from datetime import datetime
from passlib.hash import pbkdf2_sha256

from lib.Config import Configuration as conf
from lib.VulnManager import SystemGroup, Component, Ticket
from lib.database.CVESearch import getVulns, getCVEInfo, isVulnerable
from lib.Toolkit import xFromy

try:
  import psycopg2
except:
  sys.exit("Dependencies missing! First run the install script.")

# Variables
vmdb = conf.getVMpsqlConnection()

# Functions
# Decorators
def cursor_wrapped(func):
  def func_wrapper(*args, **kwargs):
    cur=vmdb.cursor()
    result = func(cur, *args, **kwargs)
    cur.close()
    cursorOpen=False
    return result
  return func_wrapper

# ADD
@cursor_wrapped
def addSystemGroup(group):
  if type(group) is not SystemGroup: return False
  j=group.getDict()
  try:
    groupID=cur.execute("""INSERT INTO System_Groups (name, team_id, info)
                             SELECT %s, id, %s
                               FROM Teams
                               WHERE name = %s
                             RETURNING id;""" , (j['groupName'], j['notes'], j['team']))
    for c in j["components"]:
      componentID=cur.execute("""WITH s as (
                                   SELECT id, name
                                   FROM Components
                                   WHERE name = %s
                                 ), i AS (
                                   INSERT INTO Components (name)
                                   SELECT %s
                                   WHERE NOT EXISTS (SELECT 1 FROM s)
                                   RETURNING id, name
                                ) SELECT id, name FROM i
                                  UNION ALL
                                  SELECT id, name FROM s; """,(c, c))
      try:
        cur.execute("""INSERT INTO Components_in_System_Group VALUES(%s, %s);""",(componentID, groupID))
      except:
        pass
    vmdb.commit()
    return True
  except Exception as e:
    print(e)
    return False

@cursor_wrapped
def addTicket(cur, ticket):
  if type(ticket) is not Ticket: return False
  t=ticket.getDict()
  try:
    cur.execute("""SELECT id FROM System_Groups WHERE name = %s AND team_id IN (SELECT id FROM Teams WHERE name = %s);""",(t["groupName"], t["team"]))
    sgid=cur.fetchone()[0]
    cur.execute("""SELECT id FROM Components WHERE name = %s;""",(t["vulnComp"]["cpe"],))
    cid=cur.fetchone()[0]
    cur.execute("""SELECT id FROM Teams WHERE name = %s;""",(t["team"],))
    tid=cur.fetchone()[0]
    cur.execute("""INSERT INTO Tickets VALUES (DEFAULT, %s, %s, %s, %s, %s, %s) RETURNING ID;""",(None, None, t["cve"], sgid, cid, tid))
    ticket_id=cur.fetchone()[0]
    cur.execute("""INSERT INTO Ticket_Histories(ticket_id, datetime, ticket_status_id) VALUES(%s, %s, %s) RETURNING ID;""",
                (ticket_id, datetime.fromtimestamp(time.time()), _DEFAULT_STATUS))
    history=cur.fetchone()[0]
    cur.execute("""UPDATE Tickets SET history_created_id=%s, history_last_id=%s WHERE id=%s"""%(ticket_id, ticket_id, history))
    vmdb.commit()
    return True
  except Exception as e:
    import traceback
    print(traceback.format_exc())
    return False

@cursor_wrapped
def addUser(cur, user):
  # TODO all user stuff
  u=user.getDict();
  pwd=pbkdf2_sha256.encrypt(u["password"], rounds=rounds, salt_size=saltLength)
  try:
    groupID=cur.execute("""INSERT INTO Users VALUES(DEFAULT, %s, first_name, last_name, password);""" , (u['userID'], u['notes'], j['team']))
    return True
  except:
    return False
  
# GET
@cursor_wrapped
def getUser(cur, username):
  cur.execute("""SELECT * FROM Users WHERE user_name=%s;""", (username,))
  c = cur.fetchone()
  cur.execute("""SELECT * FROM Teams WHERE team_id IN (SELECT team_id from Users_in_Team WHERE user_id=%s;""", (username,))
  t=cur.fetchall()
  teams=[]
  for x in t:
    cur.execute("""SELECT * FROM Team_Types WHERE id=%s;""", (x[0],))
    types=cur.fetchall()
    teams.append({"name":x[1], "team_type":types[1], "access":{ "ticket_access":types[2], "system_group": types[3], "statistics": types[4], "team":types[5]}})
  return {"username": username, "first_name": c[2], "last_name": c[3], "teams": teams}

@cursor_wrapped
def checkPass(cur, name, pw):
  cur.execute("""SELECT * FROM Users WHERE user_name=%s;""", (name,))
  user = cur.fetchone() 
  return True if user and pbkdf2_sha256.verify(pw, user[4]) else False
  
@cursor_wrapped
def getGroups(cur, team, colorVulnerable=False):
  cur.execute("""SELECT * FROM System_Groups WHERE team_id IN (SELECT id FROM Teams WHERE name=%s);""", (team,))
  c = cur.fetchall()
  glist=[]
  for x in c:
    glist.append(getGroupDetails(x).getDict())
  if colorVulnerable:
    for x in glist:
      for comp in x["components"]:
        vuln=isVulnerable(comp["cpe"])
        if vuln: x["vulnerable"]=True
        comp["vulnerable"]=vuln
  return sorted(glist, key=lambda s: s["groupName"].lower())

@cursor_wrapped
def getGroup(cur, team, group):
  cur.execute("""SELECT * FROM System_Groups WHERE team_id IN (SELECT id FROM Teams WHERE name=%s) AND name=%s;""", (team, group))
  c = cur.fetchone()
  if c: c= getGroupDetails(c).getDict()
  return c

@cursor_wrapped
def getGroupDetails(cur, group):
  cur.execute("""SELECT name FROM Teams WHERE id=%s;""", (group[2],))
  tid=cur.fetchone()[0]
  clist=[]
  cur.execute("""SELECT * FROM Components WHERE id IN ( SELECT component_ID FROM Components_in_System_Group WHERE system_group_id = %s );""", (group[2],))
  for comp in cur.fetchall():
    clist.append(Component(comp[1]))
  return SystemGroup(None, group[1], tid, None, [], clist)

@cursor_wrapped
def getComponents(cur, team=None, system=None):
  if team and system:
    cur.execute("""SELECT name FROM Components WHERE id IN (
                     SELECT component_ID FROM Components_in_System_Group WHERE system_group_id IN (
                       SELECT id FROM System_Group WHERE team_id IN ( 
                         SELECT id FROM Teams WHERE name = %s ) AND name = %s;));""", (team,system))
  else:
    cur.execute("""SELECT name FROM Components;""")
  c=[x[0] for x in cur.fetchall()]
  return sorted(list(set(c)), key=lambda s: s.lower())

@cursor_wrapped
def getCPEs(cur, team):
  cur.execute("""SELECT name FROM Components;""")
  cpes=[x[0] for x in cur.fetchall()]
  return list(set(itertools.chain(*cpes)))

@cursor_wrapped
def getStatusses(cur):
  cur.execute("""SELECT name FROM Ticket_Statusses;""")
  return [x[0] for x in cur.fetchall()]

@cursor_wrapped
def getLastTeamVulns(cur, team, limit):
  return getVulns(getCPEs(team), limit)

@cursor_wrapped
def getVulnsForSystem(cur, groupName, systemTeam, cpes=None):
  if type(cpes) is not list and cpes:cpes=[cpes]
  if not cpes:
    cur.execute("""SELECT name FROM Components WHERE id IN (
                     SELECT component_id FROM Components_in_System_Group WHERE system_group_id IN (
                       SELECT id FROM System_Groups WHERE name = %s AND team_id IN (
                         SELECT id FROM Teams WHERE name = %s )));""",(groupName, systemTeam))
    cpes=[x[0] for x in cur.fetchall()]

  # Get tickets for every cve for the vulnerable systems
  tickets=[]
  for cpe in cpes:
    tickets.extend([getTicket(cve, cpe, groupName, systemTeam) for cve in [x["id"] for x in getVulns([cpe], 0)]])
  tickets=[x for x in tickets if not x["status"].lower().startswith("closed")]
  return tickets

@cursor_wrapped
def getTicket(cur, cve, cpe, system, team):
  cur.execute("""SELECT Tickets.id, Teams.name, System_Groups.name, Tickets.cve, Components.name, 
                   Ticket_Statusses.name, Ticket_Histories.ticket_notes, Ticket_Histories.ticket_resolution_id,
                   Ticket_Histories.ticket_resolution_fix
                 FROM Tickets, System_Groups, Components, Teams, Ticket_Histories, Ticket_Resolutions, Ticket_Statusses
                 WHERE cve=%s
                   AND component_id    IN ( SELECT id FROM Components    WHERE name = %s )
                   AND system_group_id IN ( SELECT id FROM System_Groups WHERE name = %s
                                               AND team_id IN ( SELECT id FROM Teams         WHERE name = %s ))
                   AND System_Groups.id      = Tickets.system_group_id
                   AND Components.id         = Tickets.component_id
                   AND Teams.id              = Tickets.team_id
                   AND Ticket_Histories.id   = Tickets.history_last_id
                   AND Ticket_Statusses.id   = Ticket_Histories.ticket_status_id;""", (cve, cpe, system, team))
  c=cur.fetchone()
  if c:
    cur.execute("SELECT name FROM Ticket_Resolutions")
    t_res= [x[0] for x in cur.fetchall()]
    cur.execute("SELECT name FROM Ticket_Priorities")
    t_prior= [x[0] for x in cur.fetchall()]
    cur.execute("SELECT name FROM Ticket_Urgencies")
    t_urgent= [x[0] for x in cur.fetchall()]
    cur.execute("""SELECT datetime, Users.user_name, cvss, ticket_notes, Ticket_Statusses.name, ticket_resolution_id, ticket_resolution_fix,
                     ticket_priority_id, ticket_urgency_id
                   FROM Ticket_Histories, Ticket_Statusses, Users
                   WHERE ticket_id=%s
                     AND Ticket_Statusses.id = Ticket_Histories.ticket_status_id
                     AND Users.id = Ticket_Histories.user_id;""", (c[0],))
    histories=cur.fetchall()
    h=[]
    for x in histories:
      h.append({"time": x[0], "user": x[1], "cvss": x[2], "notes": x[3], "status": x[4], "update": {"type": xFromy(x[5], t_res), "cpe": x[6]},
                "priority": xFromy(x[7], t_prior), "urgency": xFromy(x[8], t_urgent)})
    if c[7]:
      cur.execute("""SELECT name FROM Ticket_Resolutions WHERE id = %s""", (c[7],))
      c[7]=cur.fetchone()[0]
    c=Ticket(c[1], c[2], c[3], c[4], c[5], c[6], h, c[7], c[8])
    c=c.getDict()
  else:
    tick=Ticket(team, system, cve, cpe)
    addTicket(tick)
    c=tick.getDict()
    c=getTicket(c["cve"], c["vulnComp"]["cpe"], c["groupName"], c["team"])
  c["cve"]=getCVEInfo(cve)
  return c

@cursor_wrapped
def getTickets(cur, team, system=None, limit=None):
  # Build up statement
  command = """SELECT Tickets.cve, Components.name, System_Groups.name, Teams.name
                 FROM Tickets, System_Groups, Components, Teams, Ticket_histories
                 WHERE System_Groups.id      = Tickets.system_group_id
                   AND Components.id         = Tickets.component_id
                   AND Teams.id              = Tickets.team_id
                   AND Ticket_Histories.id   = Tickets.history_last_id """
  if   limit and limit.lower()=="open":   limit = """AND Ticket_Histories.ticket_status_id IN
                                                       ( SELECT id FROM Ticket_Statusses WHERE name NOT LIKE 'closed-%%' ) """
  elif limit and limit.lower()=="closed": limit = """AND Ticket_Histories.ticket_status_id IN
                                                       ( SELECT id FROM Ticket_Statusses WHERE name LIKE 'closed-%%' ) """
  else:                                   limit = ""
  # Execute statement based on system or all systems
  if system:
    cur.execute(command + limit + """AND Tickets.team_id IN ( SELECT id FROM Teams         WHERE name=%s )
                                     AND system_group_id IN ( SELECT id FROM Teams         WHERE name=%s )""", (team, system))
  else:
    cur.execute(command + limit + """AND Tickets.team_id IN ( SELECT id FROM Teams         WHERE name=%s )""", (team, ))
  ticks=[getTicket(x[0],x[1],x[2],x[3]) for x in cur.fetchall()]
  # Sort
  systems={}
  for t in ticks:
    if t["groupName"] in systems.keys(): systems[t["groupName"]].append(t)
    else: systems[t["groupName"]]=[t]
  return systems

@cursor_wrapped
def getStatistics(cur, team):
  groups=getGroups(team)
  start=date(date.today().year, date.today().month,1)
  end=date(date.today().year, date.today().month+1,1)
  systems=[]
  for x in groups:
    new=0
    closed=0
    oac=0
    tickets=[]
    for cpe in [y["cpe"] for y in x["components"]]:
      tickets.extend([getTicket(cve, cpe, x["groupName"], team) for cve in [x["id"] for x in getVulns([cpe], 0)]])
    for z in tickets:
      opened=False
      for h in z["history"]:
        d=date(h["time"].year, h["time"].month, h["time"].day)
        if "status" in h and d >= start and d < end:
          if h["status"] == _DEFAULT_STATUS_TEXT:
            new+=1
            opened=True
          elif h["status"].lower().startswith("closed"):
            if opened:
              oac+=1
              new-=1
            else:
              closed+=1
    systems.append({"systems":x["groupName"], "new": new, "closed": closed, "openedAndClosed":oac})
  return systems

@cursor_wrapped
def getTeams(cur):
  cur.execute("SELECT name FROM Teams;")
  return [x[0] for x in cur.fetchall()]

# UPDATE
@cursor_wrapped
def setDBTicketStatus(cur, ticket, user, status=None, notes=None, update=None, updateType=None, ):
  #Working here
  t=ticket.getDict()
  # Prevent unnecesarry database operations
  if all(None == i for i in [status, notes, update, updateType]):  return False
  if status     and t["status"]             == status.strip():     return False
  if notes      and t["notes"]              == notes.strip():      return False
  if update     and t["vulnComp"]["update"] == update.strip():     return False
  if updateType and t["vulnComp"]["type"]   == updateType.strip(): return False
  # Fetch the current ticket ID and history
  cur.execute("""SELECT id, history_last_id FROM Tickets WHERE cve=%s
                   AND component_id    IN ( SELECT id FROM Components    WHERE name = %s )
                   AND system_group_id IN ( SELECT id FROM System_Groups WHERE name = %s )
                   AND Tickets.team_id IN ( SELECT id FROM Teams         WHERE name = %s );""", (t["cve"], t["vulnComp"]["cpe"], t["groupName"], t["team"]))
  x=cur.fetchone()
  if not x: return False
  t_id, h_id = x
  # Fetch all the ticket information
  t=getTicket(t["cve"], t["vulnComp"]["cpe"], t["groupName"], t["team"])
  cur.execute("""SELECT * FROM Ticket_Histories WHERE id = %s;""", (h_id,))
  h=cur.fetchone()
  # Get ID's of settings, or get the old id's
  if status == None:
    status=t["status"]
  cur.execute("""SELECT id FROM Ticket_Statusses WHERE name = %s;""", (status,))
  status=cur.fetchone()[0]
  notes  = t["notes"]              if notes  == None else notes
  update = t["vulnComp"]["update"] if update == None else update
  if updateType == None:
    updateType=t["vulnComp"]["type"]
  else:
    cur.execute("""SELECT id FROM Ticket_Resolutions WHERE name = %s;""", (status,))
    updateType=cur.findone()[0]
  # Get user ID
  cur.execute("""SELECT id FROM Users WHERE user_name = %s""", (user,))
  uid=cur.fetchone()[0]
  # Now make a new entry using above data
  now = datetime.fromtimestamp(time.time())
  cur.execute("""INSERT INTO Ticket_Histories VALUES(DEFAULT, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING id;""",
                  (h[1], now, uid, h[4], h[5], notes, updateType, update, status, h[10], h[11] ))
  last_id=cur.fetchone()[0]
  cur.execute("""UPDATE Tickets SET history_last_id = %s WHERE id = %s;""", (last_id, t_id))
  vmdb.commit()
  return True

# Constants
_DEFAULT_STATUS = 1
_DEFAULT_STATUS_TEXT=getStatusses()[0]

# EXCEPTIONS
class teamRequiredException(Exception):
  pass
class alreadyExistsException(Exception):
  pass
