#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Interface for the database connection
#
# Copyright (c) 2014-2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# Imports
import calendar
import itertools
import re
import time
import sys
from datetime import date
from datetime import datetime
from passlib.hash import pbkdf2_sha256

from lib.Config import Configuration as conf
from lib.VulnManager import SystemGroup, Component, Ticket
from lib.database.CVESearch import getVulns, getCVEInfo, isVulnerable

try:
  import psycopg2
except:
  sys.exit("Dependencies missing! First run the install script.")

# Variables
vmdb = conf.getVMpsqlConnection()
cur = vmdb.cursor()
# ADD
def addSystemGroup(group):
  if type(group) is not SystemGroup: return False
  j=group.getDict()
  try:
    groupID=cur.execute("""INSERT INTO System_Groups (name, team_id, info)
                             SELECT %s, id, %s
                               FROM Teams
                               WHERE name = %s
                             RETURNING id;""" , (j['groupName'], j['notes'], j['team']))
    for c in j["components"]:
      componentID=cur.execute("""WITH s as (
                                   SELECT id, name
                                   FROM Components
                                   WHERE name = %s
                                 ), i AS (
                                   INSERT INTO Components (name)
                                   SELECT %s
                                   WHERE NOT EXISTS (SELECT 1 FROM s)
                                   RETURNING id, name
                                ) SELECT id, name FROM i
                                  UNION ALL
                                  SELECT id, name FROM s; """,(c, c))
      try:
        cur.execute("""INSERT INTO Components_in_System_Group VALUES(%s, %s);""",(componentID, groupID))
      except:
        pass
    vmdb.commit()
    return True
  except Exception as e:
    print(e)
    return False

def addTicket(ticket):
  if type(ticket) is not Ticket: return False
  t=ticket.getDict()
  try:
    cur.execute("""SELECT id FROM System_Groups WHERE name = %s;""",(t["groupName"],))
    sgid=cur.fetchone()[0]
    cur.execute("""SELECT id FROM Components WHERE name = %s;""",(t["vulnComp"]["cpe"],))
    cid=cur.fetchone()[0]
    cur.execute("""SELECT id FROM Teams WHERE name = %s;""",(t["team"],))
    tid=cur.fetchone()[0]
    cur.execute("""SELECT id FROM Teams WHERE name = %s;""",(t["team"],))
    tid=cur.fetchone()[0]
    cur.execute("""INSERT INTO Tickets VALUES (DEFAULT, None, None, %s, %s, %s, %s) RETURNING ID;""",(t["vulnComp"]["cpe"], sgid, cid, tid))
    ticket_id=cur.fetchone()[0]
    cur.execute("""INSERT INTO Ticket_Histories VALUES(DEFAULT, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING ID;""",
                (ticket_id, calendar.timegm(time.gmtime()), Null, 0.0, Null, Null, Null, 0, Null, Null))
    history=cur.fetchone()[0]
    print(history)
    cur.execute("""UPDATE Tickets SET history_created_id=%s, history_last_id=%s WHERE id=%s"""%(ticket_id, ticket_id, history))
  except Exception as e:
    import traceback
    #print(traceback.format_exc())
    return False

def addUser(user):
  # TODO all user stuff
  u=user.getDict();
  pwd=pbkdf2_sha256.encrypt(u["password"], rounds=rounds, salt_size=saltLength)
  try:
    groupID=cur.execute("""INSERT INTO Users VALUES(DEFAULT, %s, first_name, last_name, password);""" , (u['userID'], u['notes'], j['team']))
    return True
  except:
    return False
  
# GET
def getUser(username):
  cur.execute("""SELECT * FROM Users WHERE user_name=%s;""", (username,))
  c = cur.fetchone()
  cur.execute("""SELECT * FROM Teams WHERE team_id IN (SELECT team_id from Users_in_Team WHERE user_id=%s;""", (username,))
  t=cur.fetchall()
  teams=[]
  for x in t:
    cur.execute("""SELECT * FROM Team_Types WHERE id=%s;""", (x[0],))
    types=cur.fetchall()
    teams.append({"name":x[1], "team_type":types[1], "access":{ "ticket_access":types[2], "system_group": types[3], "statistics": types[4], "team":types[5]}})
  return {"username": username, "first_name": c[2], "last_name": c[3], "teams": teams}

def checkPass(name, pw):
  cur.execute("""SELECT * FROM Users WHERE user_name=%s;""", (name,))
  user = cur.fetchone() 
  return True if user and pbkdf2_sha256.verify(pw, user[4]) else False

def getGroups(team, colorVulnerable=False):
  cur.execute("""SELECT * FROM System_Groups WHERE team_id IN (SELECT id FROM Teams WHERE name=%s);""", (team,))
  c = cur.fetchall()
  glist=[]
  for x in c:
    glist.append(getGroupDetails(x).getDict())
  if colorVulnerable:
    for x in glist:
      for comp in x["components"]:
        vuln=isVulnerable(comp["cpe"])
        if vuln: x["vulnerable"]=True
        comp["vulnerable"]=vuln
  return sorted(glist, key=lambda s: s["groupName"].lower())

def getGroup(team, group):
  cur.execute("""SELECT * FROM System_Groups WHERE team_id IN (SELECT id FROM Teams WHERE name=%s) AND name=%s;""", (team, group))
  c = cur.fetchone()
  if c: c= getGroupDetails(c).getDict()
  return c

def getGroupDetails(group):
  cur.execute("""SELECT name FROM Teams WHERE id=%s;""", (group[2],))
  tid=cur.fetchone()[0]
  clist=[]
  cur.execute("""SELECT * FROM Components WHERE id IN ( SELECT component_ID FROM Components_in_System_Group WHERE system_group_id = %s );""", (group[2],))
  for comp in cur.fetchall():
    clist.append(Component(comp[1]))
  return SystemGroup(None, group[1], tid, None, [], clist)

def getComponents(team=None, system=None):
  if team and system:
    cur.execute("""SELECT name FROM Components WHERE id IN (
                     SELECT component_ID FROM Components_in_System_Group WHERE system_group_id IN (
                       SELECT id FROM System_Group WHERE team_id IN ( 
                         SELECT id FROM Teams WHERE name = %s ) AND name = %s;));""", (team,system))
  else:
    cur.execute("""SELECT name FROM Components;""")
  c=[x[0] for x in cur.fetchall()]
  return sorted(list(set(c)), key=lambda s: s.lower())

def getCPEs(team):
  cur.execute("""SELECT name FROM Components;""")
  cpes=[x[0] for x in cur.fetchall()]
  return list(set(itertools.chain(*cpes)))

def getLastTeamVulns(team, limit):
  return getVulns(getCPEs(team), limit)

def getVulnsForSystem(groupName, systemTeam, cpes=None):
  if type(cpes) is not list and cpes:cpes=[cpes]
  cur.execute("""SELECT name FROM Components WHERE id IN (
                   SELECT component_id FROM Components_in_System_Group WHERE system_group_id IN (
                     SELECT id FROM System_Groups WHERE name = %s AND team_id IN (
                       SELECT id FROM Teams WHERE name = %s )));""",(groupName, systemTeam))
  if not cpes: cpes=[x[0] for x in cur.fetchall()]

  # Get tickets for every cve for the vulnerable systems
  tickets=[]
  for cpe in cpes:
    tickets.extend([getTicket(cve, cpe, groupName, systemTeam) for cve in [x["id"] for x in getVulns([cpe], 0)]])
  tickets=[x for x in tickets if not x["status"].lower().startswith("closed")]
  return tickets

def getTicket(cve, cpe, system, team):
  cur.execute("""SELECT Tickets.id, Teams.name, System_Groups.name, Tickets.cve, Components.name, 
                   Ticket_Statusses.name, Ticket_Histories.ticket_notes, Ticket_Resolutions.name,
                   Ticket_Histories.ticket_resolution_fix
                 FROM Tickets, System_Groups, Components, Teams, Ticket_Histories, Ticket_Resolutions, Ticket_Statusses
                 WHERE cve=%s
                   AND component_id    IN ( SELECT id FROM Components    WHERE name = %s )
                   AND system_group_id IN ( SELECT id FROM System_Groups WHERE name = %s )
                   AND Tickets.team_id IN ( SELECT id FROM Teams         WHERE name = %s )
                   AND System_Groups.id      = Tickets.system_group_id
                   AND Components.id         = Tickets.component_id
                   AND Teams.id              = Tickets.team_id
                   AND Ticket_Histories.id   = Tickets.history_last_id
                   AND Ticket_Statusses.id   = Ticket_Histories.ticket_status_id
                   AND Ticket_Resolutions.id = Ticket_Histories.ticket_resolution_id;""", (cve, cpe, system, team))
  c=cur.fetchone()
  if c:
    cur.execute("""SELECT * FROM Ticket_Histories WHERE ticket_id=%s;""", (c[0],))
    histories=cur.fetchall()
    c=Ticket(c[1], c[2], c[3], c[4], c[5], histories, c[6], c[7])
  else:
    tick=Ticket(team, system, cve, cpe)
    addTicket(tick)
    c=tick.getDict()
  c["cve"]=getCVEInfo(cve)
  return c

def getTickets(team, system=None, limit=None):
  if   limit and limit.lower()=="open":   limit=""
  elif limit and limit.lower()=="closed": limit=""
  
  
  
  
  cur.execute("""SELECT * FROM Ticket_Statusses WHERE name LIKE 'closed-%' """)
  if system:
    cur.execute("""SELECT * FROM Tickets
                     WHERE team_id         IN ( SELECT id FROM Teams         WHERE name=%s )""", (team))
  else:
    cur.execute("""SELECT * FROM Tickets
                     WHERE team_id         IN ( SELECT id FROM Teams         WHERE name=%s )
                       AND system_group_id IN ( SELECT id FROM Teams         WHERE name=%s )""", (team, system))
  search={"team":team}
  if system: search["groupName"]=system
  systems={}
  ticks=tickets.find(search)
  # Limits
  if   limit and limit.lower()=="open":   ticks=[x for x in ticks if not x["status"].lower().startswith("closed")]
  elif limit and limit.lower()=="closed": ticks=[x for x in ticks if x["status"].lower().startswith("closed")]
  # Sort
  for t in ticks:
    x = getTicket(t["cve"], t["groupName"], team)
    if t["groupName"] in systems.keys(): systems[t["groupName"]].append(x)
    else: systems[t["groupName"]]=[x]
  return systems

def getStatistics(team):
  groups=getGroups(team)
  start=date(date.today().year, date.today().month,1)
  end=date(date.today().year, date.today().month+1,1)
  default=conf.getTicketDefaultValue()
  systems=[]
  for x in groups:
    new=0
    closed=0
    oac=0
    tickets=[]
    for cpe in [y["cpe"] for y in x["components"]]:
      tickets.extend([getTicket(cve, cpe, x["groupName"], team) for cve in [x["id"] for x in getVulns([cpe], 0)]])
    for z in tickets:
      opened=False
      for h in z["history"]:
        d=datetime.fromtimestamp(h["time"]/10000000).date()
        if "status" in h and d >= start and d < end:
          if h["status"] == default:
            new+=1
            opened=True
          elif h["status"].lower().startswith("closed"):
            if opened:
              oac+=1
              new-=1
            else:
              closed+=1
    systems.append({"systems":x["groupName"], "new": new, "closed": closed, "openedAndClosed":oac})
  return systems

def getTeams(team_type=None):
  if team_type:
    cur.execute("SELECT name FROM Teams WHERE type_id IN (SELECT id FROM Team_Types WHERE name = %s);"%(team_type))
  else:
    cur.execute("SELECT name FROM Teams;")
  return [x[0] for x in cur.fetchall()]

# UPDATE
def setDBTicketNotes(ticket, user, notes):
  t=ticket.getDict()
  if "notes" in t and t["notes"] == notes.strip(): return False
  history={"time": int(time.time()*10000000), "user":user, "notes": notes.strip()}
  tickets.update({"team":t["team"], "groupName":t["groupName"], "cve":t["cve"], "vulnComp.cpe":t["vulnComp"]["cpe"]},{"$set":{"notes": notes.strip()}, "$addToSet":{"history":history}})
  return True

def setDBTicketStatus(ticket, user, status):
  t=ticket.getDict()
  if t["status"] == status.strip(): return False
  cur.execute("""SELECT id, history_last_id FROM Tickets
                   WHERE cve=%s
                     AND system_group_id IN ( SELECT id FROM System_Groups WHERE name=%s )
                     AND component_id    IN ( SELECT id FROM Components    WHERE name=%s )""",(t["cve"], t["groupName"], t["vulnComp"]))
  ticket_id, last_id = cur.fetchone()
  cur.execute("""SELECT * FROM Ticket_Histories WHERE id=%s""", (last_id,))
  last_history=cur.fetchone()
  time=int(time.time()*10000000)
  history={"time": int(time.time()*10000000), "user":user, "status": status.strip()}
  cur.execute("""INSERT INTO Ticket_Histories VALUES(DEFAULT, %s); """)
  cur.execute("""UPDATE Tickets SET column1 = value1, column2 = value2...., columnN = valueN
WHERE [condition];""")
  tickets.update({"team":t["team"], "groupName":t["groupName"], "cve":t["cve"], "vulnComp.cpe":t["vulnComp"]["cpe"]},{"$set":{"status": status.strip()}, "$addToSet":{"history":history}})
  return True

def setDBTicketUpdate(ticket, user, uType, update):
  t=ticket.getDict()
  if not update: update=""
  if t["vulnComp"]["cpe"] == update.strip(): return False
  history={"time": int(time.time()*10000000), "user":user, "update": {"type":uType, "cpe":update.strip()}}
  tickets.update({"team":t["team"], "groupName":t["groupName"], "cve":t["cve"], "vulnComp.cpe":t["vulnComp"]["cpe"]},{"$set":{"vulnComp.update": update.strip(), "vulnComp.type":uType.strip()}, "$addToSet":{"history":history}})
  return True

# EXCEPTIONS
class teamRequiredException(Exception):
  pass
class alreadyExistsException(Exception):
  pass
