#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Interface for users in the log-in system
#  > Written for MongoDB
#
# Copyright (c) 2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# Imports
from passlib.hash import pbkdf2_sha256

from lib.Config import Configuration as conf

# Variables
conn = conf.getVMpsqlConnection()
cur=conn.cursor()

rounds = conf.getUserEncryptionRounds()
saltLength = conf.getUserSaltLength()

# Functions
# Functions
def getUser(username):
  cur.execute("""SELECT * FROM Users WHERE user_name=%s;""", (username,))
  c = cur.fetchone()
  cur.execute("""SELECT * FROM Teams WHERE id IN (SELECT team_id from Users_in_Team WHERE user_id=%s);""", (c[0],))
  t=cur.fetchall()
  teams=[]
  for x in t:
    cur.execute("""SELECT * FROM Team_Types WHERE id=%s;""", (x[0],))
    types=cur.fetchone()
    teams.append({"name":x[1], "team_type":types[1], "access":{ "ticket_access":types[2], "system_group": types[3], "statistics": types[4], "team":types[5], "db":types[6]}})
  return {"username": username, "first_name": c[2], "last_name": c[3], "teams": teams}

def checkPass(name, pw):
  cur.execute("""SELECT * FROM Users WHERE user_name=%s;""", (name,))
  user = cur.fetchone() 
  return True if user and pbkdf2_sha256.verify(pw, user[4]) else False

def addUser(user):
  # TODO all user stuff
  u=user.getDict();
  pwd=pbkdf2_sha256.encrypt(u["password"], rounds=rounds, salt_size=saltLength)
  try:
    groupID=cur.execute("""INSERT INTO Users VALUES(DEFAULT, %s, first_name, last_name, password);""" , (u['userID'], u['notes'], j['team']))
    return True
  except:
    return False
