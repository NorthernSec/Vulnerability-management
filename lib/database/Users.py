#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Interface for users in the log-in system
#  > Written for MongoDB
#
# Copyright (c) 2015 	Pieter-Jan Moreels
#
# Software is free software released under the "Original BSD license"

# Imports
from passlib.hash import pbkdf2_sha256

from lib.Config import Configuration as conf

# Variables
conn = conf.getVMpsqlConnection()

rounds = conf.getUserEncryptionRounds()
saltLength = conf.getUserSaltLength()

# Functions
# Decorators
def cursor_wrapped(func):
  def func_wrapper(*args, **kwargs):
    cur=conn.cursor()
    result = func(cur, *args, **kwargs)
    cur.close()
    return result
  return func_wrapper

@cursor_wrapped
def getUser(cur, username):
  cur.execute("""SELECT * FROM Users WHERE user_name=%s;""", (username,))
  c = cur.fetchone()
  teams={}
  cur.execute("""SELECT id, name from Teams;""")
  t={x[0]: x[1] for x in cur.fetchall()}
  cur.execute("""SELECT * from Roles;""")
  r={x[0]: [x[1], x[2], x[3], x[4], x[5], x[6]] for x in cur.fetchall()}
  cur.execute("""SELECT * from Access_Rights;""")
  a={x[0]: x[1] for x in cur.fetchall()}
  cur.execute("""SELECT team_id, role_id from Users_in_Team WHERE user_id=%s;""", (c[0],))
  uit=cur.fetchall()
  for x in uit:
    if x[0] in teams:
      teams[x[0]]["roles"].append({"name": r[x[1]][0], 
       "access":{ "ticket":a[r[x[1]][1]], "system_group": a[r[x[1]][2]], "statistics": a[r[x[1]][3]], "team":a[r[x[1]][4]], "db":r[x[1]][5]}})
    else:
      teams[x[0]]={"name":t[x[0]], "roles":[ {"name": r[x[1]][0], 
       "access":{ "ticket":a[r[x[1]][1]], "system_group": a[r[x[1]][2]], "statistics": a[r[x[1]][3]], "team":a[r[x[1]][4]], "db":r[x[1]][5]}}]}
  return {"username": username, "first_name": c[2], "last_name": c[3], "teams": teams.values()}

@cursor_wrapped
def checkPass(cur, name, pw):
  cur.execute("""SELECT * FROM Users WHERE user_name=%s;""", (name,))
  user = cur.fetchone() 
  return True if user and pbkdf2_sha256.verify(pw, user[4]) else False

@cursor_wrapped
def addUser(cur, user):
  # TODO all user stuff
  u=user.getDict();
  pwd=pbkdf2_sha256.encrypt(u["password"], rounds=rounds, salt_size=saltLength)
  try:
    groupID=cur.execute("""INSERT INTO Users VALUES(DEFAULT, %s, first_name, last_name, password);""" , (u['userID'], u['notes'], j['team']))
    return True
  except:
    return False
