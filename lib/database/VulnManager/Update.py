@cursor_wrapped
def setDBTicketStatus(cur, ticket, user, status=None, notes=None, update=None, updateType=None, ):
  #Allows us to work both with dict and Ticket types
  t=ticket.getDict() if type(ticket) == Ticket else ticket
  if type(ticket) == Ticket: t=getTicket(t["cve"], t["vulnComp"]["cpe"], t["groupName"], t["team"]).getDict()
  
  # Prevent unnecesarry database operations
  if all(None == i for i in [status, notes, update, updateType]):  return False
  if status     and t["status"]             == status.strip():     return False
  if notes      and t["notes"]              == notes.strip():      return False
  if update     and t["vulnComp"]["update"] == update.strip():     return False
  if updateType and t["vulnComp"]["type"]   == updateType.strip(): return False
  # Fetch the current ticket ID and history
  cur.execute("""SELECT id, history_last_id FROM Tickets WHERE cve=%s
                   AND component_id    IN ( SELECT id FROM Components    WHERE name = %s )
                   AND system_group_id IN ( SELECT id FROM System_Groups WHERE name = %s
                           AND team_id IN ( SELECT id FROM Teams         WHERE name = %s ));""", (t["cve"], t["vulnComp"]["cpe"], t["groupName"], t["team"]))
  x=cur.fetchone()
  if not x: return False
  t_id, h_id = x
  # Fetch all the ticket history information
  cur.execute("""SELECT * FROM Ticket_Histories WHERE id = %s;""", (h_id,))
  h=cur.fetchone()
  # Get ID's of settings, or get the old id's
  if status == None:
    status=t["status"]
  cur.execute("""SELECT id FROM Ticket_Statusses WHERE name = %s;""", (status,))
  status=cur.fetchone()[0]
  notes  = t["notes"]              if notes  == None else notes
  update = t["vulnComp"]["update"] if update == None else update
  if updateType == None: updateType=t["vulnComp"]["type"]
  cur.execute("""SELECT id FROM Ticket_Resolutions WHERE name = %s;""", (updateType,))
  updateType=cur.fetchone()
  updateType=updateType[0] if updateType else None
  # Get user ID
  cur.execute("""SELECT id FROM Users WHERE user_name = %s""", (user,))
  uid=cur.fetchone()[0]
  # Now make a new entry using above data
  now = datetime.fromtimestamp(time.time())
  cur.execute("""INSERT INTO Ticket_Histories VALUES(DEFAULT, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING id;""",
                  (h[1], now, uid, h[4], h[5], notes, updateType, update, status, h[10], h[11] ))
  last_id=cur.fetchone()[0]
  cur.execute("""UPDATE Tickets SET history_last_id = %s WHERE id = %s;""", (last_id, t_id))
  vmdb.commit()
  return True

@cursor_wrapped
def updateCPE(cur, ticket):
  # temporary disable this function
  return
  # TODO: Verify if this structure won't cause Race conditions
  t=ticket.getDict() if type(ticket) == Ticket else ticket
  if type(ticket) == Ticket: t=getTicket(t["cve"], t["vulnComp"]["cpe"], t["groupName"], t["team"]).getDict()
  update=t['vulnComp']
  cid=addComponent(update['update'])
  sid=getSystemGroupID(t['groupName'], t['team'])
  ocid=getComponentID(update['cpe'])
  if update['type'] in ["upgrade", "merge"]:
    cur.execute("""UPDATE Components_in_System_Group
                   SET component_id = %s
                   WHERE component_id = %s
                     and system_group_id = %s;""", (cid, ocid, sid))
    vmdb.commit()
  elif update["type"] == "remove":
    cur.execute("""DELETE FROM Components_in_System_Group
                   WHERE component_id = %s
                     and system_group_id = %s;""", (ocid, sid))
    vmdb.commit()
  # Else we assume patch, in which case nothing needs to happen, only return cpes.

  # Find list of related tickets
  return getTicketsForSystemComponent(update['cpe'], t['groupName'], t['team'])
