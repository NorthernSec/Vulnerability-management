# -- Head.py --
# Imports
import copy
import decimal
import itertools
import re
import time
import traceback
import sys
from datetime import date
from datetime import datetime
from passlib.hash import pbkdf2_sha256

from lib.objects import SystemGroup, Component, Ticket
from lib.Config  import Configuration as conf
from lib.exceptions import InvalidVariableTypes
from lib.Toolkit import xFromy

import lib.database.CVESearch as cvedb

# Variables
vmdb = conf.getVMpsqlConnection()

# Decorators
def cursor_wrapped(func):
  def func_wrapper(*args, **kwargs):
    cur=vmdb.cursor()
    result = func(cur, *args, **kwargs)
    cur.close()
    return result
  return func_wrapper

# -- Add.py --
@cursor_wrapped
def addComponent(cur, component):
  if type(component) is not str: raise(InvalidVariableTypes)
  cur.execute("""WITH s as (
                 SELECT id, name
                 FROM Components
                   WHERE name = %s
                 ), i AS (
                   INSERT INTO Components (name)
                   SELECT %s
                   WHERE NOT EXISTS (SELECT 1 FROM s)
                   RETURNING id, name
                 ) SELECT id, name FROM i
                 UNION ALL
                 SELECT id, name FROM s; """,(component, component))
  vmdb.commit()
  return cur.fetchone()[0]

@cursor_wrapped
def addSystemGroup(cur, _group):
  if type(_group) is not SystemGroup: raise(InvalidVariableTypes)
  j=_group.getDict()
  try:
    groupID=cur.execute("""INSERT INTO System_Groups (name, team_id, info)
                             SELECT %s, id, %s
                               FROM Teams
                               WHERE name = %s
                             RETURNING id;""" , (j['groupName'], j['notes'], j['team']))
    for c in j["components"]:
      componentID=addComponent(c)
      try:
        cur.execute("""INSERT INTO Components_in_System_Group VALUES(%s, %s);""",(componentID, groupID))
      except:
        pass
    vmdb.commit()
    return groupID
  except Exception as e:
    print(traceback.format_exc())
    return None

@cursor_wrapped
def addTicket(cur, _ticket):
  if type(_ticket) is not Ticket: raise(InvalidVariableTypes)
  t=_ticket.getDict()
  try:
    cur.execute("""SELECT id FROM System_Groups WHERE name = %s AND team_id IN (SELECT id FROM Teams WHERE name = %s);""",(t["groupName"], t["team"]))
    sgid=cur.fetchone()[0]
    cur.execute("""SELECT id FROM Components WHERE name = %s;""",(t["vulnComp"]["cpe"],))
    cid=cur.fetchone()[0]
    cur.execute("""SELECT id FROM Teams WHERE name = %s;""",(t["team"],))
    tid=cur.fetchone()[0]
    priority = calculatePriority(t)
    info     = cvedb.getCVEInfo(t["cve"])
    cur.execute("""INSERT INTO Tickets VALUES (DEFAULT, %s, %s, %s, %s, %s, %s) RETURNING ID;""",(None, None, t["cve"], sgid, cid, tid))
    ticket_id=cur.fetchone()[0]
    cur.execute("""INSERT INTO Ticket_Histories(ticket_id, datetime, cvss, ticket_status_id, ticket_priority_id) VALUES(%s, %s, %s, %s, %s) RETURNING ID;""",
                (ticket_id, datetime.fromtimestamp(time.time()), info["cvss"], _DEFAULT_STATUS, priority))
    history=cur.fetchone()[0]
    cur.execute("""UPDATE Tickets SET history_created_id=%s, history_last_id=%s WHERE id=%s"""%(ticket_id, ticket_id, history))
    vmdb.commit()
    return ticket_id
  except Exception as e:
    print(traceback.format_exc())
    return None

@cursor_wrapped
def addUser(cur, _user):
  # TODO all user stuff
  u=_user.getDict();
  pwd=pbkdf2_sha256.encrypt(u["password"], rounds=rounds, salt_size=saltLength)
  try:
    groupID=cur.execute("""INSERT INTO Users VALUES(DEFAULT, %s, first_name, last_name, password);""" , (u['userID'], u['notes'], j['team']))
    return groupID
  except:
    return None

@cursor_wrapped
def addTicket_Status(cur, status):
  if type(status) is not str: raise(InvalidVariableTypes)
  cur.execute("INSERT INTO Ticket_Statusses VALUES(DEFAULT, %s) RETURNING id",(status,))
  vmdb.commit()
  return cur.fetchone()[0]

@cursor_wrapped
def add_ticket_Resolutions(cur, resolution):
  if type(resolution) is not str: raise(InvalidVariableTypes)
  cur.execute("INSERT INTO Ticket_Resolutions VALUES(DEFAULT, %s) RETURNING id",(resolution,))
  vmdb.commit()
  return cur.fetchone()[0]

@cursor_wrapped
def addAccess_Right(cur, access_right):
  if type(access_right) is not str: raise(InvalidVariableTypes)
  cur.execute("INSERT INTO Access_Rights VALUES(DEFAULT, %s) RETURNING id",(access_right,))
  vmdb.commit()
  return cur.fetchone()[0]

def addTicket_Priority(cur, name, max_implement_time, min_cvss):
  if ((type(name) is not str)      or (type(max_implement_time) is not int) or 
      (type(min_cvss) is not float and type(min_cvss) is not decimal.Decimal)):
    raise(InvalidVariableTypes)
  cur.execute("INSERT INTO Ticket_Priorities VALUES(DEFAULT, %s, %s, %s) RETURNING id",
              (name, max_implement_time, min_cvss))
  vmdb.commit()
  return cur.fetchone()[0]

def addTicket_Urgency(cur, name, score):
  if ((type(name) is not str) or (type(score) is not int)): raise(InvalidVariableTypes)
  cur.execute("INSERT INTO Ticket_Urgencies VALUES(DEFAULT, %s, %s) RETURNING id",(name, score))
  vmdb.commit()
  return cur.fetchone()[0]

def addTeam(cur, name, description):
  if ((type(name) is not str) or (type(description) is not int)): raise(InvalidVariableTypes)
  cur.execute("INSERT INTO Teams VALUES(DEFAULT, %s, %s) RETURNING id",(name, description))
  vmdb.commit()
  return cur.fetchone()[0]

def addRole(cur, name, ticket_access, system_group_access, statistics_access, team_access, db_access):
  a = getAccessRights()
  if (not all(isinstance(x,str) for x in [name, ticket_access, system_group_access, statistics_access, team_access]) or
     (type(db_access) is not bool)): raise(InvalidVariableTypes)
  try:
    cur.execute("INSERT INTO Roles VALUES(DEFAULT, %s, %s, %s, %s, %s, %s);",
                (name, a[ticket_access], a[system_group_access], a[statistics_access], a[team_access], db_access))
    vmdb.commit()
    return cur.fetchone()[0]
  except:
    return None
# -- Get-IDs.py --
# Object ID's
@cursor_wrapped
def getSystemGroupID(cur, name, team):
  cur.execute("""SELECT System_Groups.id
                 FROM System_Groups, Teams
                 WHERE System_Groups.name = %s
                   and Teams.name = %s
                   and System_Groups.team_id = Teams.id;""", (name, team))
  sid=cur.fetchone()
  return sid[0] if sid else None


@cursor_wrapped
def getComponentID(cur, name):
  cur.execute("""SELECT id FROM Components WHERE name = %s;""", (name, ))
  cid=cur.fetchone()
  return cid[0] if cid else None


# List of ID's
@cursor_wrapped
def getPriorityLevels(cur):
  cur.execute("""SELECT id, min_cvss FROM Ticket_Priorities WHERE min_cvss IS NOT NULL;""")
  # Sort from highest CVSS to lowest
  priorities=sorted(cur.fetchall(),key=lambda x: x[1])
  return priorities
# -- Get-Names.py --
@cursor_wrapped
def getComponentNames(cur, team=None, system=None):
  if team and system:
    cur.execute("""SELECT name FROM Components WHERE id IN (
                     SELECT component_ID FROM Components_in_System_Group WHERE system_group_id IN (
                       SELECT id FROM System_Group WHERE team_id IN ( 
                         SELECT id FROM Teams WHERE name = %s ) AND name = %s;));""", (team,system))
  else:
    cur.execute("""SELECT name FROM Components;""")
  c=[x[0] for x in cur.fetchall()]
  return sorted(list(set(c)), key=lambda s: s.lower())


@cursor_wrapped
def getCPENames(cur, team=None):
  query="SELECT name FROM Components "
  if team:
    query+="""WHERE id IN(
                SELECT component_id FROM Components_in_System_Group WHERE system_group_id IN(
                  SELECT id from System_Groups WHERE team_id IN(
                    SELECT id from Teams where name = %s)))"""
  cur.execute(query, list(filter(None, [team])))
  cpes=[x[0] for x in cur.fetchall()]
  return list(set(itertools.chain(*cpes)))


@cursor_wrapped
def getStatusses(cur):
  cur.execute("""SELECT name FROM Ticket_Statusses;""")
  return [x[0] for x in cur.fetchall()]


@cursor_wrapped
def getTeamNames(cur):
  cur.execute("SELECT name FROM Teams;")
  return [x[0] for x in cur.fetchall()]
# -- Get-Objects.py --
@cursor_wrapped
def getTicket(cur, cve, cpe, system, team):
  cur.execute("""SELECT Tickets.id, Teams.name, System_Groups.name, Tickets.cve, Components.name, 
                   Ticket_Statusses.name, Ticket_Histories.ticket_notes, Ticket_Histories.ticket_resolution_id,
                   Ticket_Histories.ticket_resolution_fix, Ticket_Histories.cvss, Ticket_Histories.ticket_priority_id
                 FROM Tickets, System_Groups, Components, Teams, Ticket_Histories, Ticket_Resolutions, Ticket_Statusses
                 WHERE cve=%s
                   AND component_id    IN ( SELECT id FROM Components    WHERE name = %s )
                   AND system_group_id IN ( SELECT id FROM System_Groups WHERE name = %s
                           AND team_id IN ( SELECT id FROM Teams         WHERE name = %s ))
                   AND Teams.id              = System_Groups.team_id
                   AND System_Groups.id      = Tickets.system_group_id
                   AND Components.id         = Tickets.component_id
                   AND Ticket_Histories.id   = Tickets.history_last_id
                   AND Ticket_Statusses.id   = Ticket_Histories.ticket_status_id;""", (cve, cpe, system, team))
  data=cur.fetchone()
  c=list(data) if data else data
  
  if c:
    if c[10]:
      cur.execute("SELECT name FROM Ticket_Priorities where id=%s", (c[10],))
      priority=(cur.fetchone())[0]
    else:
      priority=None
    cur.execute("SELECT name FROM Ticket_Resolutions")
    t_res= [x[0] for x in cur.fetchall()]
    cur.execute("SELECT name FROM Ticket_Priorities")
    t_prior= [x[0] for x in cur.fetchall()]
    cur.execute("SELECT name FROM Ticket_Urgencies")
    t_urgent= [x[0] for x in cur.fetchall()]
    cur.execute("""SELECT datetime, Users.user_name, cvss, ticket_notes, Ticket_Statusses.name, ticket_resolution_id, ticket_resolution_fix,
                     ticket_priority_id, ticket_urgency_id
                   FROM Ticket_Histories, Ticket_Statusses, Users
                   WHERE ticket_id=%s
                     AND Ticket_Statusses.id = Ticket_Histories.ticket_status_id
                     AND Users.id = Ticket_Histories.user_id;""", (c[0],))
    histories=cur.fetchall()
    h=[]
    for x in histories:
      h.append({"time": x[0], "user": x[1], "cvss": x[2], "notes": x[3], "status": x[4], "update": {"type": xFromy(x[5], t_res), "cpe": x[6]},
                "priority": xFromy(x[7], t_prior), "urgency": xFromy(x[8], t_urgent)})
    if c[7]:
      cur.execute("""SELECT name FROM Ticket_Resolutions WHERE id = %s""", (c[7],))
      c[7]=cur.fetchone()[0]
    c=Ticket(c[1], c[2], c[3], c[4], status=c[5], notes=c[6], history=h, resolution=c[7], resolution_fix=c[8], cvss=c[9], priority=priority, objID=c[0])
  else:
    tick=Ticket(team, system, cve, cpe)
    addTicket(tick)
    c=getTicket(tick.cve, tick.vulnComp["cpe"], tick.groupName, tick.team)
  c.addInfo(cvedb.getCVEInfo(cve))
  updatePriority(c)
  return c


@cursor_wrapped
def getTickets(cur, team, system=None, limit=None):
  # Build up statement
  command = """SELECT Tickets.cve, Components.name, System_Groups.name, Teams.name
                 FROM Tickets, System_Groups, Components, Teams, Ticket_histories
                 WHERE System_Groups.id      = Tickets.system_group_id
                   AND Components.id         = Tickets.component_id
                   AND Teams.id              = System_Groups.team_id
                   AND Ticket_Histories.id   = Tickets.history_last_id """
  if   limit and limit.lower()=="open":   limit = """AND Ticket_Histories.ticket_status_id IN
                                                       ( SELECT id FROM Ticket_Statusses WHERE name NOT LIKE 'closed-%%' ) """
  elif limit and limit.lower()=="closed": limit = """AND Ticket_Histories.ticket_status_id IN
                                                       ( SELECT id FROM Ticket_Statusses WHERE name LIKE 'closed-%%' ) """
  else:                                   limit = ""
  # Execute statement based on system or all systems
  if system:
    cur.execute(command + limit + """AND system_group_id IN ( SELECT id FROM System_Groups WHERE name = %s
                                             AND team_id IN ( SELECT id FROM Teams         WHERE name = %s ))""", (system, team))
  else:
    cur.execute(command + limit + """AND system_group_id IN ( SELECT id FROM System_Groups WHERE team_id
                                                         IN ( SELECT id FROM Teams         WHERE name = %s ))""", (team, ))
  return [getTicket(x[0],x[1],x[2],x[3]) for x in cur.fetchall()]


@cursor_wrapped
def getVulnsForSystem(cur, groupName, systemTeam, cpes=None):
  if type(cpes) is not list and cpes:cpes=[cpes]
  if not cpes:
    cur.execute("""SELECT name FROM Components WHERE id IN (
                     SELECT component_id FROM Components_in_System_Group WHERE system_group_id IN (
                       SELECT id FROM System_Groups WHERE name = %s AND team_id IN (
                         SELECT id FROM Teams WHERE name = %s )));""",(groupName, systemTeam))
    cpes=[x[0] for x in cur.fetchall()]

  # Get tickets for every cve for the vulnerable systems
  tickets=[]
  for cpe in cpes:
    tickets.extend([getTicket(cve, cpe, groupName, systemTeam) for cve in [x["id"] for x in cvedb.getVulns([cpe], 0)]])
  tickets=[x for x in tickets if not x.status.lower().startswith("closed")]
  return tickets


@cursor_wrapped
def getGroups(cur, team, group=None):
  teams=getTeamDicts()
  groups=[]
  query = """SELECT * FROM System_Groups WHERE team_id IN (SELECT id FROM Teams WHERE name=%s)"""
  if group: query+= "AND name=%s;"
  cur.execute(query, list(filter(None, [team, group])))
  for g in cur.fetchall():
    clist=[]
    cur.execute("""SELECT * FROM Components WHERE id IN (
                     SELECT component_ID FROM Components_in_System_Group WHERE system_group_id = %s );""", (g[0],))
    for comp in cur.fetchall():
      clist.append(Component(comp[1]))
    groups.append(SystemGroup(None, g[1], teams[g[2]], None, [], clist))
  return groups
  

@cursor_wrapped
def getGroupDetails(cur, group):
  cur.execute("""SELECT name FROM Teams WHERE id=%s;""", (group[2],))
  tid=cur.fetchone()[0]
  clist=[]
  cur.execute("""SELECT * FROM Components WHERE id IN ( SELECT component_ID FROM Components_in_System_Group WHERE system_group_id = %s );""", (group[0],))
  for comp in cur.fetchall():
    clist.append(Component(comp[1]))
  return SystemGroup(None, group[1], tid, None, [], clist)


@cursor_wrapped
def getTicketsForSystemComponent(cur, component, _system):
  tickets=getTickets(team, _system.groupName)
  #for x in tickets:
  #  print(x)
    #tickets.append(getTicket(x[0], x[1], x[2], x[3]))
  return tickets

# -- Get-IDs.py --
# Object ID's
@cursor_wrapped
def getSystemGroupID(cur, name, team):
  cur.execute("""SELECT System_Groups.id
                 FROM System_Groups, Teams
                 WHERE System_Groups.name = %s
                   and Teams.name = %s
                   and System_Groups.team_id = Teams.id;""", (name, team))
  sid=cur.fetchone()
  return sid[0] if sid else None


@cursor_wrapped
def getComponentID(cur, name):
  cur.execute("""SELECT id FROM Components WHERE name = %s;""", (name, ))
  cid=cur.fetchone()
  return cid[0] if cid else None


# List of ID's
@cursor_wrapped
def getPriorityLevels(cur):
  cur.execute("""SELECT id, min_cvss FROM Ticket_Priorities WHERE min_cvss IS NOT NULL;""")
  # Sort from highest CVSS to lowest
  priorities=sorted(cur.fetchall(),key=lambda x: x[1])
  return priorities
# -- Get-Dicts.py --
@cursor_wrapped
def getLastTeamVulns(cur, team, limit):
  return cvedb.getVulns(getCPENames(team), limit)

@cursor_wrapped
def getGroupVulns(cur, team, colorVulnerable=False):
  c=getGroups(team)
  glist=[]
  for x in c:
    glist.append(x.getDict())
  if colorVulnerable:
    for x in glist:
      for comp in x["components"]:
        vuln=cvedb.isVulnerable(comp["cpe"])
        if vuln: x["vulnerable"]=True
        comp["vulnerable"]=vuln
  return sorted(glist, key=lambda s: s["groupName"].lower())

@cursor_wrapped
def getStatistics(cur, team):
  today=date.today()
  start=date(today.year, today.month,1)
  if today.month < 12: end=date(today.year, today.month+1,1)
  else:                end=date(today.year+1, 1, 1)
  systems=[]
  for x in getGroupVulns(team):
    new=0
    closed=0
    oac=0
    tickets=[]
    for cpe in [y["cpe"] for y in x["components"]]:
      tickets.extend([getTicket(cve, cpe, x["groupName"], team) for cve in [x["id"] for x in cvedb.getVulns([cpe], 0)]])
    for ticket in tickets:
      opened=False
      for action in ticket.history:
        aDate=date(action["time"].year, action["time"].month, action["time"].day)
        if "status" in action and aDate >= start and aDate < end:
          if action["status"] == _DEFAULT_STATUS_TEXT:
            new+=1
            opened=True
          elif action["status"].lower().startswith("closed"):
            if opened:
              oac+=1
              new-=1
            else:
              closed+=1
    systems.append({"systems":x["groupName"], "new": new, "closed": closed, "openedAndClosed":oac})
  return systems

@cursor_wrapped
def getTeamDicts(cur):
  cur.execute("SELECT id, name FROM Teams;")
  return {x[0]: x[1] for x in cur.fetchall()}

@cursor_wrapped
def getAccessRights(cur):
  cur.execute("SELECT * FROM Access_Rights;")
  return {v: k for k, v in dict(cur.fetchall()).items()}
# -- Update.py --
@cursor_wrapped
def setDBTicketStatus(cur, ticket, user, status=None, notes=None, update=None, updateType=None, ):
  #Allows us to work both with dict and Ticket types
  t=ticket.getDict() if type(ticket) == Ticket else ticket
  if type(ticket) == Ticket: t=getTicket(t["cve"], t["vulnComp"]["cpe"], t["groupName"], t["team"]).getDict()
  
  # Prevent unnecesarry database operations
  if all(None == i for i in [status, notes, update, updateType]):  return False
  if status     and t["status"]             == status.strip():     return False
  if notes      and t["notes"]              == notes.strip():      return False
  if update     and t["vulnComp"]["update"] == update.strip():     return False
  if updateType and t["vulnComp"]["type"]   == updateType.strip(): return False
  # Fetch the current ticket ID and history
  cur.execute("""SELECT id, history_last_id FROM Tickets WHERE cve=%s
                   AND component_id    IN ( SELECT id FROM Components    WHERE name = %s )
                   AND system_group_id IN ( SELECT id FROM System_Groups WHERE name = %s
                           AND team_id IN ( SELECT id FROM Teams         WHERE name = %s ));""", (t["cve"], t["vulnComp"]["cpe"], t["groupName"], t["team"]))
  x=cur.fetchone()
  if not x: return False
  t_id, h_id = x
  # Fetch all the ticket history information
  cur.execute("""SELECT * FROM Ticket_Histories WHERE id = %s;""", (h_id,))
  h=cur.fetchone()
  # Get ID's of settings, or get the old id's
  if status == None:
    status=t["status"]
  cur.execute("""SELECT id FROM Ticket_Statusses WHERE name = %s;""", (status,))
  status=cur.fetchone()[0]
  notes  = t["notes"]              if notes  == None else notes
  update = t["vulnComp"]["update"] if update == None else update
  if updateType == None: updateType=t["vulnComp"]["type"]
  cur.execute("""SELECT id FROM Ticket_Resolutions WHERE name = %s;""", (updateType,))
  updateType=cur.fetchone()
  updateType=updateType[0] if updateType else None
  # Get user ID
  cur.execute("""SELECT id FROM Users WHERE user_name = %s""", (user,))
  uid=cur.fetchone()[0]
  # Now make a new entry using above data
  now = datetime.fromtimestamp(time.time())
  cur.execute("""INSERT INTO Ticket_Histories VALUES(DEFAULT, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING id;""",
                  (h[1], now, uid, h[4], h[5], notes, updateType, update, status, h[10], h[11] ))
  last_id=cur.fetchone()[0]
  cur.execute("""UPDATE Tickets SET history_last_id = %s WHERE id = %s;""", (last_id, t_id))
  vmdb.commit()
  return True


@cursor_wrapped
def updateCPE(cur, _ticket):
  # temporary disable this function
  return
  # TODO: Verify if this structure won't cause Race conditions
  t=_ticket.getDict()
  update=t['vulnComp']
  cid=addComponent(update['update'])
  sid=getSystemGroupID(t['groupName'], t['team'])
  ocid=getComponentID(update['cpe'])
  if update['type'] in ["upgrade", "merge"]:
    cur.execute("""UPDATE Components_in_System_Group
                   SET component_id = %s
                   WHERE component_id = %s
                     and system_group_id = %s;""", (cid, ocid, sid))
    vmdb.commit()
  elif update["type"] == "remove":
    cur.execute("""DELETE FROM Components_in_System_Group
                   WHERE component_id = %s
                     and system_group_id = %s;""", (ocid, sid))
    vmdb.commit()
  # Else we assume patch, in which case nothing needs to happen, only return cpes.

  # Find list of related tickets
  return getTicketsForSystemComponent(update['cpe'], t['groupName'], t['team'])


@cursor_wrapped
def updatePriority(cur, _ticket):
  cvss=_ticket.cveInfo["cvss"]
  if _ticket.cvss == cvss:
    return
  priority=calculatePriority(ticket)
  #if priority
# -- Calculations.py --
def calculatePriority(_ticket):
  priority=None
  try:
    cvss=float(_ticket.cveInfo["cvss"])
  except:
    return None
  # TODO might to reverse loop to fix None problem
  for x in getPriorityLevels():
    if x[1]<cvss:
      priority=x[0]
    else:
      break
  return priority
# -- Tail.py --
# Constants
_DEFAULT_STATUS = 1
_DEFAULT_STATUS_TEXT=getStatusses()[0]
