@cursor_wrapped
def addComponent(cur, component):
  if type(component) is not str: raise(InvalidVariableTypes)
  cur.execute("""WITH s as (
                 SELECT id, name
                 FROM Components
                   WHERE name = %s
                 ), i AS (
                   INSERT INTO Components (name)
                   SELECT %s
                   WHERE NOT EXISTS (SELECT 1 FROM s)
                   RETURNING id, name
                 ) SELECT id, name FROM i
                 UNION ALL
                 SELECT id, name FROM s; """,(component, component))
  vmdb.commit()
  return cur.fetchone()[0]

@cursor_wrapped
def addSystemGroup(cur, _group):
  if type(_group) is not SystemGroup: raise(InvalidVariableTypes)
  j=_group.getDict()
  try:
    groupID=cur.execute("""INSERT INTO System_Groups (name, team_id, info)
                             SELECT %s, id, %s
                               FROM Teams
                               WHERE name = %s
                             RETURNING id;""" , (j['groupName'], j['notes'], j['team']))
    for c in j["components"]:
      componentID=addComponent(c)
      try:
        cur.execute("""INSERT INTO Components_in_System_Group VALUES(%s, %s);""",(componentID, groupID))
      except:
        pass
    vmdb.commit()
    return groupID
  except Exception as e:
    print(traceback.format_exc())
    return None

@cursor_wrapped
def addTicket(cur, _ticket):
  if type(_ticket) is not Ticket: raise(InvalidVariableTypes)
  t=_ticket.getDict()
  try:
    cur.execute("""SELECT id FROM System_Groups WHERE name = %s AND team_id IN (SELECT id FROM Teams WHERE name = %s);""",(t["groupName"], t["team"]))
    sgid=cur.fetchone()[0]
    cur.execute("""SELECT id FROM Components WHERE name = %s;""",(t["vulnComp"]["cpe"],))
    cid=cur.fetchone()[0]
    cur.execute("""SELECT id FROM Teams WHERE name = %s;""",(t["team"],))
    tid=cur.fetchone()[0]
    priority = calculatePriority(t)
    info     = cvedb.getCVEInfo(t["cve"])
    cur.execute("""INSERT INTO Tickets VALUES (DEFAULT, %s, %s, %s, %s, %s, %s) RETURNING ID;""",(None, None, t["cve"], sgid, cid, tid))
    ticket_id=cur.fetchone()[0]
    cur.execute("""INSERT INTO Ticket_Histories(ticket_id, datetime, cvss, ticket_status_id, ticket_priority_id) VALUES(%s, %s, %s, %s, %s) RETURNING ID;""",
                (ticket_id, datetime.fromtimestamp(time.time()), info["cvss"], _DEFAULT_STATUS, priority))
    history=cur.fetchone()[0]
    cur.execute("""UPDATE Tickets SET history_created_id=%s, history_last_id=%s WHERE id=%s"""%(ticket_id, ticket_id, history))
    vmdb.commit()
    return ticket_id
  except Exception as e:
    print(traceback.format_exc())
    return None

@cursor_wrapped
def addUser(cur, _user):
  # TODO all user stuff
  u=_user.getDict();
  pwd=pbkdf2_sha256.encrypt(u["password"], rounds=rounds, salt_size=saltLength)
  try:
    groupID=cur.execute("""INSERT INTO Users VALUES(DEFAULT, %s, first_name, last_name, password);""" , (u['userID'], u['notes'], j['team']))
    return groupID
  except:
    return None

@cursor_wrapped
def addTicket_Status(cur, status):
  if type(status) is not str: raise(InvalidVariableTypes)
  cur.execute("INSERT INTO Ticket_Statusses VALUES(DEFAULT, %s) RETURNING id",(status,))
  vmdb.commit()
  return cur.fetchone()[0]

@cursor_wrapped
def addTicket_Resolution(cur, resolution):
  if type(resolution) is not str: raise(InvalidVariableTypes)
  cur.execute("INSERT INTO Ticket_Resolutions VALUES(DEFAULT, %s) RETURNING id",(resolution,))
  vmdb.commit()
  return cur.fetchone()[0]

@cursor_wrapped
def addAccess_Right(cur, access_right):
  if type(access_right) is not str: raise(InvalidVariableTypes)
  cur.execute("INSERT INTO Access_Rights VALUES(DEFAULT, %s) RETURNING id",(access_right,))
  vmdb.commit()
  return cur.fetchone()[0]

@cursor_wrapped
def addTicket_Priority(cur, name, max_implement_time, min_cvss):
  if type(min_cvss) is int: min_cvss = float(min_cvss)
  if ((type(name) is not str)      or (type(max_implement_time) is not int) or 
      (type(min_cvss) is not float and type(min_cvss) is not decimal.Decimal and
       min_cvss is not None)):
    raise(InvalidVariableTypes)
  cur.execute("INSERT INTO Ticket_Priorities VALUES(DEFAULT, %s, %s, %s) RETURNING id",
              (name, max_implement_time, min_cvss))
  vmdb.commit()
  return cur.fetchone()[0]

@cursor_wrapped
def addTicket_Urgency(cur, name, score):
  if ((type(name) is not str) or (type(score) is not int)): raise(InvalidVariableTypes)
  cur.execute("INSERT INTO Ticket_Urgencies VALUES(DEFAULT, %s, %s) RETURNING id",(name, score))
  vmdb.commit()
  return cur.fetchone()[0]

@cursor_wrapped
def addTeam(cur, name, description):
  if ((type(name) is not str) or (type(description) is not str)): raise(InvalidVariableTypes)
  cur.execute("INSERT INTO Teams VALUES(DEFAULT, %s, %s) RETURNING id",(name, description))
  vmdb.commit()
  return cur.fetchone()[0]

@cursor_wrapped
def addRole(cur, name, ticket_access, system_group_access, statistics_access, team_access, db_access):
  a = getAccessRights()
  if (not all(isinstance(x,str) for x in [name, ticket_access, system_group_access, statistics_access, team_access]) or
     (type(db_access) is not bool)): raise(InvalidVariableTypes)
  try:
    cur.execute("INSERT INTO Roles VALUES(DEFAULT, %s, %s, %s, %s, %s, %s);",
                (name, a[ticket_access], a[system_group_access], a[statistics_access], a[team_access], db_access))
    vmdb.commit()
    return cur.fetchone()[0]
  except:
    return None
